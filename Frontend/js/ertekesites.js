import { API_URL } from './config.js';
//Pagination

const tableBody = document.querySelector("#employeesTable tbody");
const rowsPerPage = 10;
let currentPage = 1;
let employeesData = [];
let productsData = [];

const EXCLUDED_BILLS_KEY = 'excludedBillNumbers'; // localStorage kulcs
const STORNO_BILLS_KEY = 'stornoBillNumbers'; // √öj kulcs a sztorn√≥ sz√°ml√°khoz

// Kiz√°rt sz√°mlasz√°mok bet√∂lt√©se localStorage-b√≥l
function loadExcludedBillNumbers() {
    try {
        const storedData = localStorage.getItem(EXCLUDED_BILLS_KEY);
        return storedData ? JSON.parse(storedData) : [];
    } catch (err) {
        console.error("Hiba a kiz√°rt sz√°mlasz√°mok bet√∂lt√©sekor:", err);
        return [];
    }
}

// Sztorn√≥ sz√°mlasz√°mok bet√∂lt√©se localStorage-b√≥l
function loadStornoBillNumbers() {
    try {
        const storedData = localStorage.getItem(STORNO_BILLS_KEY);
        return storedData ? JSON.parse(storedData) : [];
    } catch (err) {
        console.error("Hiba a sztorn√≥ sz√°mlasz√°mok bet√∂lt√©sekor:", err);
        return [];
    }
}

// Kiz√°rt sz√°mlasz√°mok ment√©se localStorage-ba
function saveExcludedBillNumbers(billNumbers) {
    try {
        localStorage.setItem(EXCLUDED_BILLS_KEY, JSON.stringify(Array.from(billNumbers)));
    } catch (err) {
        console.error("Hiba a kiz√°rt sz√°mlasz√°mok ment√©sekor:", err);
    }
}

// Sztorn√≥ sz√°mlasz√°mok ment√©se localStorage-ba
function saveStornoBillNumbers(billNumbers) {
    try {
        localStorage.setItem(STORNO_BILLS_KEY, JSON.stringify(Array.from(billNumbers)));
    } catch (err) {
        console.error("Hiba a sztorn√≥ sz√°mlasz√°mok ment√©sekor:", err);
    }
}

Promise.all([
  fetch(`${API_URL}sale`, { cache: "no-store" }),
  fetch(`${API_URL}buy`, { cache: "no-store" }),
  fetch(`${API_URL}partner`, { cache: "no-store" }),
  fetch(`${API_URL}sale`, { cache: "no-store" })
])
  .then(([saleRes, buyRes, partnerRes, saleDetailsRes]) => {
    return Promise.all([
      saleRes.json(),
      buyRes.json(),
      partnerRes.json(),
      saleDetailsRes.json()
    ]);
  })
  .then(([saleData, buyData, partnerData, saleDetails]) => {
    // Kombin√°lt adat l√©trehoz√°sa
    const combinedData = [
      ...saleData.map(item => ({
        ...item,
        type: "Elad√°s",
        id: item.sale_ID,
        date: item.sale_date,
        comment: item.comment?.startsWith("A(z) ") ? item.comment.slice(5) : item.comment
      })),
      ...buyData.map(item => ({
        ...item,
        type: "Bev√©telez√©s",
        id: item.buy_ID,
        date: item.buy_date
      }))
    ];

    // Csak azok a t√©telek, amelyekn√©l a quantity_sale nem negat√≠v (ezt m√°r nem sz≈±rj√ºk ki)
    const filteredData = combinedData;

    // Adatok rendez√©se d√°tum alapj√°n (leg√∫jabb el√∂l)
    filteredData.sort((a, b) => new Date(b.date) - new Date(a.date));

    // Glob√°lis adatt√°rol√≥k friss√≠t√©se
    employeesData = filteredData;
    productsData = partnerData;

    // Sztorn√≥ kapcsolatok fel√©p√≠t√©se √©s friss√≠t√©se
    updateStornoRelationships();

    // T√°bl√°zat renderel√©se
    renderTable();
  })
  .catch(error => {
    console.error("Hiba az adatok bet√∂lt√©se k√∂zben:", error);
  });

// Sztorn√≥ kapcsolatok fel√©p√≠t√©se √©s localStorage friss√≠t√©se
function updateStornoRelationships() {
    // Gy≈±jts√ºk √∂ssze az eredeti sz√°ml√°kat (kiz√°rand√≥) √©s a sztorn√≥ sz√°ml√°kat (megjelen√≠tend≈ë)
    const excludedBillNumbers = new Set(loadExcludedBillNumbers());
    const stornoBillNumbers = new Set(loadStornoBillNumbers());
    
    // El≈ësz√∂r megtal√°ljuk az √∂sszes sztorn√≥zott sz√°ml√°t √©s annak eredeti sz√°ml√°j√°t
    employeesData.forEach(item => {
        // Ellen≈ërizz√ºk, hogy sztorn√≥zott sz√°ml√°r√≥l van-e sz√≥
        const isStorno = item.comment && 
                        (item.comment.includes("j√≥v√°√≠r√°sa") || 
                         item.comment.includes("j√≥v√°√≠r√°s")) &&
                        (item.quantity_sale < 0 || item.total_price < 0);
        
        if (isStorno) {
            // A sztorn√≥ sz√°ml√°t megjel√∂lj√ºk, NEM z√°rjuk ki
            if (item.bill_number) {
                stornoBillNumbers.add(item.bill_number);
            }
            
            // Az eredeti sz√°mla azonos√≠t√≥j√°nak kinyer√©se a kommentb≈ël
            const originalBillNumberMatch = item.comment?.match(/A\(z\) ([^\s]+) sz√°m√∫/);
            if (originalBillNumberMatch && originalBillNumberMatch[1]) {
                const originalBillNumber = originalBillNumberMatch[1];
                // Csak az eredeti sz√°ml√°t z√°rjuk ki
                excludedBillNumbers.add(originalBillNumber);
                console.log(`Kiz√°rva CSAK az eredeti sz√°mla: ${originalBillNumber}`);
            }
        }
    });
    
    console.log("Kiz√°rt sz√°mlasz√°mok (eredeti sz√°ml√°k):", Array.from(excludedBillNumbers));
    console.log("Sztorn√≥ sz√°mlasz√°mok (megjelen√≠tend≈ë):", Array.from(stornoBillNumbers));
    
    // Ments√ºk el a localStorage-ba
    saveExcludedBillNumbers(excludedBillNumbers);
    saveStornoBillNumbers(stornoBillNumbers);
}

// üîπ T√°bl√°zat friss√≠t√©se az aktu√°lis oldallal
function renderTable() {
    tableBody.innerHTML = "";  // Clear table
    mobileView.innerHTML = ""; // Clear mobile view

    // Kiz√°rt sz√°mlasz√°mok √©s sztorn√≥ sz√°mlasz√°mok bet√∂lt√©se localStorage-b√≥l
    const excludedBillNumbers = new Set(loadExcludedBillNumbers());
    const stornoBillNumbers = new Set(loadStornoBillNumbers());
    
    console.log("Renderel√©s sor√°n kiz√°rt sz√°mlasz√°mok:", Array.from(excludedBillNumbers));
    console.log("Renderel√©s sor√°n sztorn√≥ sz√°mlasz√°mok:", Array.from(stornoBillNumbers));
    
    // Sz≈±rj√ºk az adatokat, hogy csak az eredeti sz√°ml√°kat z√°rjuk ki, a sztorn√≥ sz√°ml√°kat megtartjuk
    const filteredData = employeesData.filter(item => {
        // Ha nincs sz√°mlasz√°m, megtartjuk (bev√©telez√©s lehet)
        if (!item.bill_number) {
            return true;
        }
        
        // Ha a sz√°mlasz√°m szerepel a kiz√°rand√≥k k√∂z√∂tt (eredeti sz√°ml√°k), akkor kisz≈±rj√ºk
        if (excludedBillNumbers.has(item.bill_number)) {
            console.log(`Kisz≈±rt eredeti sz√°mla: ${item.bill_number}`);
            return false;
        }
        
        return true;
    });

    console.log(`Eredeti adatok sz√°ma: ${employeesData.length}, Sz≈±rt adatok sz√°ma: ${filteredData.length}`);

    let start = (currentPage - 1) * rowsPerPage;
    let end = start + rowsPerPage;
    let paginatedItems = filteredData.slice(start, end);

    // T√°bl√°zat renderel√©se
    paginatedItems.forEach(user => {
        const customer = productsData.find(p => p.customer_ID === user.customer_ID);
        const customerName = customer ? `${customer.last_name} ${customer.first_name}` : "N/A";
        const transactionType = user.type || "Elad√°s";
        const customerStatus = customer ? (customer.status === 0 ? "V√°s√°rl√≥" : "Besz√°ll√≠t√≥") : "N/A";
        
        // Ellen≈ërizz√ºk, hogy sztorn√≥ sz√°ml√°r√≥l van-e sz√≥
        const isStorno = stornoBillNumbers.has(user.bill_number);

        // Table row - sztorn√≥ sz√°mla eset√©n piros h√°tt√©r
        let row = document.createElement("tr");
        row.classList.add("hover:bg-gray-100");
        if (isStorno) {
            row.classList.add("bg-red-100"); // Piros h√°tt√©r a sztorn√≥ sz√°ml√°knak
        }
        row.id = user.id;
        row.innerHTML = `
            <td class="hidden">${user.id || user.buy_ID || user.sale_ID}</td>
            <td class="px-6 py-4">${user.bill_number}</td>
            <td class="px-6 py-4 font-semibold ${transactionType === "Elad√°s" ? (isStorno ? 'text-red-500' : 'text-green-500') : 'text-blue-500'}">
                ${isStorno ? 'Sztorn√≥ ' : ''}${transactionType}
            </td>
            <td class="px-6 py-4">
                ${user.sale_date ? `${user.sale_date}<br>` : ""}
                ${user.buy_date ? `${user.buy_date}` : ""}
            </td>
            <td class="px-6 py-4">${customerName}</td>
            <td class="px-6 py-4">${user.total_price + " Ft"}</td>
            <td class="px-6 py-4">
                <div class="flex justify-center gap-4">
                    ${transactionType === "Elad√°s" ? `
                        <button class="view-btn desktop-view-btn" view-bill="${user.bill_number}">
                            <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#009df7">
                                <path d="M480-320q75 0 127.5-52.5T660-500q0-75-52.5-127.5T480-680q-75 0-127.5 52.5T300-500q0 75 52.5 127.5T480-320Zm0-72q-45 0-76.5-31.5T372-500q0-45 31.5-76.5T480-608q45 0 76.5 31.5T588-500q0 45-31.5 76.5T480-392Zm0 192q-146 0-266-81.5T40-500q54-137 174-218.5T480-800q146 0 266 81.5T920-500q-54 137-174 218.5T480-200Zm0-300Zm0 220q113 0 207.5-59.5T832-500q-50-101-144.5-160.5T480-720q-113 0-207.5 59.5T128-500q50 101 144.5 160.5T480-280Z"/>
                            </svg>
                        </button>
                        <button class="download-btn desktop-download-btn" data-bill="${user.bill_number}">
                            <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#009df7">
                                <path d="M480-337q-8 0-15-2.5t-13-8.5L308-492q-12-12-11.5-28t11.5-28q12-12 28.5-12.5T365-549l75 75v-286q0-17 11.5-28.5T480-800q17 0 28.5 11.5T520-760v286l75-75q12-12 28.5-11.5T652-548q11 12 11.5 28T652-492L508-348q-6 6-13 8.5t-15 2.5ZM240-160q-33 0-56.5-23.5T160-240v-80q0-17 11.5-28.5T200-360q17 0 28.5 11.5T240-320v80h480v-80q0-17 11.5-28.5T760-360q17 0 28.5 11.5T800-320v80q0 33-23.5 56.5T720-160H240Z"/>
                            </svg>
                        </button>
                    ` : ""}

                    <button class="delete-btn text-red-600 hover:text-red-800" data-id="${user.bill_number || user.bill_number}">
                        <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#ff6666">
                            <path d="M280-120q-33 0-56.5-23.5T200-200v-520q-17 0-28.5-11.5T160-760q0-17 11.5-28.5T200-800h160q0-17 11.5-28.5T400-840h160q17 0 28.5 11.5T600-800h160q17 0 28.5 11.5T800-760q0 17-11.5 28.5T760-720v520q0 33-23.5 56.5T680-120H280Zm400-600H280v520h400v-520ZM400-280q17 0 28.5-11.5T440-320v-280q0-17-11.5-28.5T400-640q-17 0-28.5 11.5T360-600v280q0 17 11.5 28.5T400-280Zm160 0q17 0 28.5-11.5T600-320v-280q0-17-11.5-28.5T560-640q-17 0-28.5 11.5T520-600v280q0 17 11.5 28.5T560-280ZM280-720v520-520Z"/>
                        </svg>
                    </button>
                </div>
            </td>
        `;
        tableBody.appendChild(row);

        // Create mobile card view
const mobileCard = document.createElement("div");
mobileCard.className = `bg-white shadow-md rounded-lg p-4 mb-4 border border-gray-200 ${isStorno ? 'bg-red-100' : ''}`;
mobileCard.setAttribute("data-id", user.customer_ID);
mobileCard.innerHTML = `
    <div class="flex justify-between items-start mb-2">
        <h3 class="text-lg font-semibold text-gray-900">${customerName}</h3>
        <div class="flex gap-2">
            ${transactionType === "Elad√°s" ? `
                <button class="view-btn desktop-view-btn" view-bill="${user.bill_number}">
                    <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#009df7">
                        <path d="M480-320q75 0 127.5-52.5T660-500q0-75-52.5-127.5T480-680q-75 0-127.5 52.5T300-500q0 75 52.5 127.5T480-320Zm0-72q-45 0-76.5-31.5T372-500q0-45 31.5-76.5T480-608q45 0 76.5 31.5T588-500q0 45-31.5 76.5T480-392Zm0 192q-146 0-266-81.5T40-500q54-137 174-218.5T480-800q146 0 266 81.5T920-500q-54 137-174 218.5T480-200Zm0-300Zm0 220q113 0 207.5-59.5T832-500q-50-101-144.5-160.5T480-720q-113 0-207.5 59.5T128-500q50 101 144.5 160.5T480-280Z"/>
                    </svg>
                </button>
                <button class="download-btn desktop-download-btn" data-bill="${user.bill_number}">
                    <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#009df7">
                        <path d="M480-337q-8 0-15-2.5t-13-8.5L308-492q-12-12-11.5-28t11.5-28q12-12 28.5-12.5T365-549l75 75v-286q0-17 11.5-28.5T480-800q17 0 28.5 11.5T520-760v286l75-75q12-12 28.5-11.5T652-548q11 12 11.5 28T652-492L508-348q-6 6-13 8.5t-15 2.5ZM240-160q-33 0-56.5-23.5T160-240v-80q0-17 11.5-28.5T200-360q17 0 28.5 11.5T240-320v80h480v-80q0-17 11.5-28.5T760-360q17 0 28.5 11.5T800-320v80q0 33-23.5 56.5T720-160H240Z"/>
                    </svg>
                </button>
            ` : ""}
            <button class="delete-btn text-red-600 hover:text-red-800" data-id="${user.bill_number || user.bill_number}">
                        <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#ff6666">
                            <path d="M280-120q-33 0-56.5-23.5T200-200v-520q-17 0-28.5-11.5T160-760q0-17 11.5-28.5T200-800h160q0-17 11.5-28.5T400-840h160q17 0 28.5 11.5T600-800h160q17 0 28.5 11.5T800-760q0 17-11.5 28.5T760-720v520q0 33-23.5 56.5T680-120H280Zm400-600H280v520h400v-520ZM400-280q17 0 28.5-11.5T440-320v-280q0-17-11.5-28.5T400-640q-17 0-28.5 11.5T360-600v280q0 17 11.5 28.5T400-280Zm160 0q17 0 28.5-11.5T600-320v-280q0-17-11.5-28.5T560-640q-17 0-28.5 11.5T520-600v280q0 17 11.5 28.5T560-280ZM280-720v520-520Z"/>
                        </svg>
                    </button>
        </div>
    </div>
    <p class="text-sm text-gray-700"><span class="font-medium">Sz√°mla:</span> ${user.bill_number}</p>
    <p class="text-sm text-gray-700">
        <span class="font-medium">T√≠pus:</span> 
        <span class="${transactionType === "Elad√°s" ? (isStorno ? 'text-red-500' : 'text-green-500') : 'text-blue-500'}">
            ${isStorno ? 'Sztorn√≥ ' : ''}${transactionType}
        </span>
    </p>
    <p class="text-sm text-gray-700">
        <span class="font-medium">D√°tum:</span> 
        ${user.sale_date ? `${user.sale_date}<br>` : ""}${user.buy_date ? `${user.buy_date}` : ""}
    </p>
    <p class="text-sm text-gray-700"><span class="font-medium">√ñsszeg:</span> ${user.total_price} Ft</p>
`;

        mobileView.appendChild(mobileCard);
    });

    generatePageNumbers();
    window.scrollTo({
        top: 0,
        left: 0,
        behavior: 'smooth'
    });
}
/*
Promise.all([
  fetch(`${API_URL}sale`),
  fetch(`${API_URL}partner`)
])
.then(([saleRes, productRes]) => {
  return Promise.all([saleRes.json(), productRes.json()]);
})
.then(([saleData, productData]) => {
  employeesData = saleData;
  productsData = productData;
  renderTable(); // Itt m√°r a m√≥dos√≠tott renderTable h√≠v√≥dik
})
.catch(error => {
  console.error("Hiba a let√∂lt√©sn√©l:", error);
});
*/
// ablak √°tm√©retez√©s figyel≈ë
window.addEventListener('resize', () => {
  renderTable();
});

// Seg√©df√ºggv√©ny a sztorn√≥zott sz√°ml√°k sz≈±r√©s√©hez
function filterOutStornoInvoices(invoices) {
    const stornoOriginalNumbers = new Set();
    
    // 1. Gy≈±jts√ºk √∂ssze az eredeti sz√°mlasz√°mokat a sztorn√≥k commentjeib≈ël
    invoices.forEach(invoice => {
        if (invoice.comment && invoice.comment.includes("j√≥v√°√≠r√°sa")) {
            const match = invoice.comment.match(/A\(z\) (.*?) sz√°m√∫ sz√°mla j√≥v√°√≠r√°sa/);
            if (match && match[1]) {
                stornoOriginalNumbers.add(match[1]);
            }
        }
    });
    
    // 2. Sz≈±rj√ºk ki a sztorn√≥kat √©s az eredeti sz√°ml√°kat is
    return invoices.filter(invoice => {
        // Ha ez egy sztorn√≥ sz√°mla
        if (invoice.comment && invoice.comment.includes("j√≥v√°√≠r√°sa")) {
            return false;
        }
        
        // Ha ehhez a sz√°ml√°hoz van sztorn√≥
        if (stornoOriginalNumbers.has(invoice.bill_number)) {
            return false;
        }
        
        return true;
    });
}




// T√∂rl√©s
async function deleteSale(billNumber) {
    console.log("T√∂rl√©shez haszn√°lt billNumber:", billNumber);
    
    if (!billNumber) {
        alert("√ârv√©nytelen sz√°mlasz√°m!");
        return;
    }

    // Sz√°mlasz√°m feldolgoz√°sa
    const billNumberParts = billNumber.split('-');
    const billNumberSuffix = billNumberParts[billNumberParts.length - 1].padStart(6, '0');

    // Elem keres√©se - figyel√ºnk a nullish √©rt√©kekre is
    const item = employeesData.find(emp => {
        if (!emp.bill_number) return false;
        const empParts = emp.bill_number.split('-');
        return empParts[empParts.length - 1] === billNumberSuffix;
    });

    if (!item) {
        alert(`Nem tal√°lhat√≥ az elem a megadott sz√°mlasz√°mmal: ${billNumber}`);
        return;
    }

    // M√°r l√©tez≈ë sztorn√≥ ellen≈ërz√©se
    const existingStorno = employeesData.find(emp => 
        emp.comment?.includes(`A(z) ${item.bill_number} sz√°m√∫ sz√°mla j√≥v√°√≠r√°sa.`));

    if (existingStorno) {
        alert("Ehhez a sz√°ml√°hoz m√°r k√©sz√ºlt j√≥v√°√≠r√≥ sz√°mla!");
        return;
    }

    // Ellen≈ërizz√ºk, hogy ez a sz√°mla nem maga is egy sztorn√≥-e
    if (item.quantity_sale < 0 || item.total_price < 0 || 
        (item.comment && item.comment.includes("j√≥v√°√≠r√°sa"))) {
        alert("Ez a sz√°mla m√°r maga is egy sztorn√≥ sz√°mla, ezt nem lehet sztorn√≥zni!");
        return;
    }

    if (!confirm(`Biztosan sztorn√≥zn√°d a(z) ${item.bill_number} sz√°m√∫ sz√°ml√°t?`)) return;

    try {
        // Sztorn√≥ adatok el≈ëk√©sz√≠t√©se
        const itemsToReverse = employeesData.filter(emp => emp.bill_number === item.bill_number);
        
        if (itemsToReverse.length === 0) {
            alert("Nem tal√°lhat√≥k a sztorn√≥zand√≥ sz√°mla t√©telei!");
            return;
        }

        const reversalData = itemsToReverse.map(emp => ({
            staff_ID: emp.staff_ID,
            customer_ID: emp.customer_ID,
            product_ID: emp.product_ID,
            quantity_sale: emp.quantity_sale * -1, // Negat√≠v √©rt√©kkel √°ll√≠tjuk be
            comment: `A(z) ${emp.bill_number} sz√°m√∫ sz√°mla j√≥v√°√≠r√°sa.`
        }));

        // API h√≠v√°s
        const response = await fetch(`${API_URL}sale/delete/${billNumberSuffix}`, {
            method: "POST",
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(reversalData)
        });

        let responseText = '';
        try {
            responseText = await response.text();
        } catch (err) {
            console.error("V√°lasz sz√∂veg olvas√°si hiba:", err);
        }

        if (!response.ok) {
            throw new Error(responseText || `HTTP hiba! St√°tusz: ${response.status}`);
        }

        // A szerver v√°lasz√°nak feldolgoz√°sa
        let result;
        try {
            // Csak akkor pr√≥b√°ljuk JSON-k√©nt √©rtelmezni, ha t√©nyleg van tartalom
            if (responseText && responseText.trim()) {
                result = JSON.parse(responseText);
            }
        } catch (err) {
            console.error("V√°lasz JSON feldolgoz√°si hiba:", err);
            // Nem √°ll√≠tjuk le a folyamatot, lehet, hogy nem JSON v√°laszt kaptunk
        }

        // Sikeres sztorn√≥z√°s feldolgoz√°sa - ak√°r kaptunk JSON v√°laszt, ak√°r nem
        if (result && Array.isArray(result) && result.length > 0) {
            // Szerver √°ltal visszaadott sztorn√≥ sz√°ml√°k hozz√°ad√°sa
            employeesData.push(...result);
            console.log("Sztorn√≥ sikeres, szerver √°ltal visszaadott adatok hozz√°adva:", result);
        } else {
            console.warn("A szerver nem adott vissza elemeket, manu√°lisan adjuk hozz√° a sztorn√≥ t√©telt");
            
            // Seg√©df√ºggv√©ny az √∫j sz√°mlasz√°m gener√°l√°s√°hoz, ha nincs defini√°lva
            const generateNewBillNumber = () => {
                // Ha van ilyen f√ºggv√©ny, haszn√°ld azt
                if (typeof window.generateNewBillNumber === 'function') {
                    return window.generateNewBillNumber();
                }
                
                // Ha nincs, gener√°lunk egy ideiglenes sz√°mlasz√°mot
                const date = new Date();
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');
                
                return `STORNO-${year}${month}${day}-${random}`;
            };
            
            // Sztorn√≥ t√©telek l√©trehoz√°sa
            const newItems = reversalData.map(item => {
                // A megfelel≈ë term√©k nev√©nek megtal√°l√°sa
                const originalItem = employeesData.find(e => e.product_ID === item.product_ID);
                
                return {
                    ...item,
                    type: "Elad√°s",
                    bill_number: generateNewBillNumber(),
                    product_name: originalItem?.product_name || "Ismeretlen term√©k",
                    date: new Date().toISOString().split('T')[0], // Mai d√°tum
                    total_price: -(originalItem?.total_price || 0), // Negat√≠v √©rt√©k
                    id: `storno_${Date.now()}_${Math.random().toString(36).substr(2, 9)}` // Egyedi azonos√≠t√≥
                };
            });
            
            employeesData.push(...newItems);
        }

        // Ments√ºk el a sztorn√≥zott √©s az eredeti sz√°ml√°t a kiz√°rtakhoz
        const excludedBillNumbers = new Set(loadExcludedBillNumbers());
        
        // Az eredeti sz√°mla kiz√°r√°sa
        excludedBillNumbers.add(item.bill_number);
        
        // Az √∫j sztorn√≥ sz√°mla kiz√°r√°sa (ha van)
        if (result && Array.isArray(result) && result.length > 0) {
            result.forEach(storno => {
                if (storno.bill_number) excludedBillNumbers.add(storno.bill_number);
            });
        }
        
        // Ments√ºk el a friss√≠tett kiz√°rt sz√°ml√°kat
        saveExcludedBillNumbers(excludedBillNumbers);
        
        alert("Sikeres sztorn√≥z√°s! J√≥v√°√≠r√≥ sz√°mla l√©trehozva.");
        
        // Friss√≠ts√ºk a sztorn√≥ kapcsolatokat √©s renderelj√ºk √∫jra a t√°bl√°zatot
        updateStornoRelationships();
        renderTable();

    } catch (err) {
        console.error("Sztorn√≥ hiba:", err);
        alert(`Hiba t√∂rt√©nt a sztorn√≥z√°s sor√°n: ${err.message}`);
    }
}


// Seg√©df√ºggv√©ny az √∫j sz√°mlasz√°m gener√°l√°s√°hoz
function generateNewBillNumber() {
    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1).padStart(2, '0');
    const prefix = `ST-${year}-`;
    
    const lastStorno = employeesData
        .filter(e => e.bill_number.startsWith(prefix))
        .sort()
        .pop();
    
    const lastNumber = lastStorno 
        ? parseInt(lastStorno.bill_number.split('-')[2]) 
        : 0;
    
    return `${prefix}${String(lastNumber + 1).padStart(6, '0')}`;
}


//Event delegation a k√ºl√∂nb√∂z≈ë gombokhoz
document.addEventListener('click', function(event) {
  // Let√∂lt√©s gombok
  const downloadBtn = event.target.closest('.download-btn');
  if (downloadBtn) {
      const billNumber = downloadBtn.getAttribute('data-bill');
      downloadInvoice(billNumber);
      return;
  }

  // Megtekint√©s gombok
  const viewBtn = event.target.closest('.view-btn');
  if (viewBtn) {
      const billNumber = viewBtn.getAttribute('view-bill');
      const formattedBillNumber = billNumber.slice(8);
      const url = `http://localhost/serpa/invoice/${formattedBillNumber}`;
      window.open(url, '_blank');
      return;
  }

  // Szerkeszt√©s gombok
  const editBtn = event.target.closest('.edit-btn');
  if (editBtn) {
      const saleId = editBtn.getAttribute('data-id');
      // Itt h√≠vd meg a szerkeszt√©s f√ºggv√©nyed
      editSale(saleId);
      return;
  }

  // T√∂rl√©s gombok
  const deleteBtn = event.target.closest('.delete-btn');
  if (deleteBtn) {
      const saleId = deleteBtn.getAttribute('data-id');
      // Itt h√≠vd meg a t√∂rl√©s f√ºggv√©nyed
      deleteSale(saleId);
      return;
  }
});

// Let√∂lt≈ë f√ºggv√©ny
function downloadInvoice(billNumber) {
  if (!billNumber) {
      console.error("Hiba: billNumber nincs megadva");
      return;
  }

  const formattedBillNumber = billNumber.slice(8);
  const url = `${API_URL}invoice/${formattedBillNumber}`;

  fetch(url)
      .then(response => {
          if (!response.ok) {
              throw new Error(`Hiba a sz√°mla let√∂lt√©sekor: ${response.statusText}`);
          }
          return response.blob();
      })
      .then(blob => {
          const downloadUrl = window.URL.createObjectURL(blob);
          const a = document.createElement("a");
          a.href = downloadUrl;
          a.download = `szamla_${formattedBillNumber}.pdf`;
          document.body.appendChild(a);
          a.click();
          a.remove();
          window.URL.revokeObjectURL(downloadUrl);
      })
      .catch(error => {
          console.error("Hiba:", error);
      });



        // Event delegation a t√°bl√°zat soraiban
        tableBody.addEventListener("click", function(e) {
            if (e.target.closest(".edit-btn")) {
                const id = e.target.closest(".edit-btn").dataset.id;
                const item = employeesData.find(emp => emp.sale_ID == id);
                openEditModal(item);
            } else if (e.target.closest(".delete-btn")) {
                const id = e.target.closest(".delete-btn").dataset.id;
                deleteSale(id);
            }
        });

//PDF let√∂lt√©s
        document.querySelectorAll('.pdfDownload-btn').forEach(button => {
            button.addEventListener('click', function() {
              const saleID = this.getAttribute('data-id');
          
              // Itt lek√©rheted az adott sorhoz tartoz√≥ adatokat (pl. product, quantity, price, stb.)
              // Ezut√°n gener√°lhatod a PDF-et √©s let√∂ltheted
          
              const doc = new jsPDF();
          
              // P√©lda adat
              const productName = "Term√©k neve"; // Itt adhatod hozz√° az adatokat, amik sz√ºks√©gesek
              const quantity = "Mennyis√©g";
              const price = "√År";
          
              doc.setFontSize(16);
              doc.text("PDF gener√°l√°s: " + productName, 20, 20);
              doc.setFontSize(12);
              doc.text(`Mennyis√©g: ${quantity}`, 20, 30);
              doc.text(`√År: ${price}`, 20, 40);
          
              // PDF let√∂lt√©s
              doc.save(`sale_${saleID}.pdf`);
            });
          });



// Ment√©s gomb esem√©ny
document.getElementById("saveChanges").addEventListener("click", async function () {
    const id = this.dataset.id;
    const updatedData = {
        product_name: document.getElementById("editName").value,
        quantity_sale: parseInt(document.getElementById("editEmail").value),
        total_price: parseFloat(document.getElementById("editStatus").value),
        sale_date: document.getElementById("editPosition").value
    };
    

    const response = await fetch(`${API_URL}sale/${id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(updatedData)
        
    });
    console.log(updatedData);
    if (response.ok) {
        const index = employeesData.findIndex(emp => emp.sale_ID == id);
        employeesData[index] = { ...employeesData[index], ...updatedData };
        renderTable();
         // PDF gener√°l√°sa
        const doc = new jsPDF();
        doc.setFontSize(16);
        doc.text("PDF gener√°l√°s: " + updatedData.product_name, 20, 20);
        doc.setFontSize(12);
        doc.text(`Mennyis√©g: ${updatedData.quantity_sale}`, 20, 30);
        doc.text(`√År: ${updatedData.total_price}`, 20, 40);
        doc.text(`D√°tum: ${updatedData.sale_date}`, 20, 50);

        // PDF let√∂lt√©se
        doc.save(`sale_${id}.pdf`);
        document.getElementById("editModal").classList.add("hidden");
    } else {
        alert("Hiba a friss√≠t√©s sor√°n!");
    }
});


function editSale(id) {
  const item = employeesData.find(emp => emp.id == id);

  if (!item) return alert("Nem tal√°lhat√≥ az elem.");

  if (item.type !== "Elad√°s") {
    alert("Csak elad√°st lehet szerkeszteni.");
    return;
  }

  openEditModal(item); // megl√©v≈ë modal nyit√≥ logika
}

// P√©ld√°ul k√∂zvetlen√ºl a script bet√∂lt√©sekor:
if (!window.mobileViewHandlerAdded) {
    mobileView.addEventListener("click", function(e) {
        if (e.target.closest(".edit-btn")) {
            const id = e.target.closest(".edit-btn").dataset.id;
            const item = employeesData.find(emp => emp.sale_ID == id);
            openEditModal(item);
        } else if (e.target.closest(".delete-btn")) {
            const id = e.target.closest(".delete-btn").dataset.id;
            deleteSale(id);
        }
    });
    window.mobileViewHandlerAdded = true; // jel√∂l√©s, hogy m√°r hozz√°d lett adva
}

        
        
        
    }

function generatePageNumbers() {
    const totalPages = Math.ceil(employeesData.length / rowsPerPage);
    const pageNumbersDiv = document.getElementById("pageNumbers");

    pageNumbersDiv.innerHTML = ""; // Clear page numbers

    for (let i = 1; i <= totalPages; i++) {
        const pageButton = document.createElement("button");
        pageButton.textContent = i;
        pageButton.classList.add("page-button", "rounded-md", "border", "border-slate-300", "py-2", "px-3", "text-center", "text-sm", "transition-all", "shadow-sm", "hover:shadow-lg", "text-slate-600", "hover:text-white", "hover:bg-blue-600", "hover:border-blue-600", "focus:text-white", "focus:bg-blue-600", "focus:border-blue-600", "active:border-blue-600", "active:text-white", "active:bg-blue-800", "disabled:pointer-events-none", "disabled:opacity-50", "disabled:shadow-none", "ml-2");

        // Disable current page button
        if (i === currentPage) {
            pageButton.disabled = true;
            pageButton.classList.add("bg-blue-600", "text-white");
        } else {
            pageButton.addEventListener("click", () => {
                currentPage = i;
                renderTable();
            });
        }

        pageNumbersDiv.appendChild(pageButton);
    }
}

// üîπ K√∂vetkez≈ë oldal
function nextPage() {
    if (currentPage < Math.ceil(employeesData.length / rowsPerPage)) {
        currentPage++;
        renderTable();
    }
}

// üîπ El≈ëz≈ë oldal
function prevPage() {
    if (currentPage > 1) {
        currentPage--;
        renderTable();
    }
}

// üîπ Els≈ë megjelen√≠t√©s
renderTable();


document.getElementById("prevBtn").addEventListener("click", prevPage);
document.getElementById("nextBtn").addEventListener("click", nextPage);







//Alkalmazott felv√©tele Modal

// Gombok √©s a modal kiv√°laszt√°sa
const openModal = document.getElementById('openModal');
const closeModal = document.getElementById('closeModal');
const modal = document.getElementById('crud-modal');
const overlay = document.getElementById('overlay');
const userDeleteModal = document.getElementById('userDeleteModal');
const applyNewStaff = document.getElementById('applyNewStaff');
const applyNewStaffForm = document.getElementById('applyNewStaffForm');

// Modal megnyit√°sa
openModal.addEventListener('click', () => {
  modal.classList.remove('hidden');
  modal.classList.add('flex');
  overlay.classList.remove('hidden');
});

// Modal bez√°r√°sa
closeModal.addEventListener('click', () => {
  modal.classList.add('hidden');
  overlay.classList.add('hidden');
});

// Bez√°r√°s, ha h√°tt√©rre kattint
modal.addEventListener('click', (e) => {
  if (e.target === modal) {
    modal.classList.add('hidden');
    overlay.classList.add('hidden');
  }
});


document.getElementById('applyNewStaff').addEventListener('click', async function(event) {
  event.preventDefault();

  // √ñsszes hiba√ºzenet t√∂rl√©se
  clearErrors(document.getElementById('applyNewStaffForm'));
  
  let isValid = true;

  // 1. VEV≈ê VALID√ÅL√ÅSA
  const selectedCustomer = document.getElementById('selectedCustomer');
  const customerHiddenInput = document.getElementById('customer_ID');

  if (selectedCustomer.textContent === 'V√°lassz √ºgyfelet' || !customerHiddenInput.value) {
    showError(customerHiddenInput, 'K√∂telez≈ë kiv√°lasztani egy √ºgyfelet!');
    isValid = false;
  } else {
    clearError(customerHiddenInput);
  }

  // 2. TERM√âKSOROK VALID√ÅL√ÅSA
  // Az els≈ë term√©ksor ellen≈ërz√©se
  const firstProductRow = document.querySelector('.productRow:not([id])'); // Az eredeti term√©ksor
  if (firstProductRow) {
    const selectedProduct = firstProductRow.querySelector('.selectedProduct');
    const productHiddenInput = firstProductRow.querySelector('.product_ID');

    if (selectedProduct.textContent === 'V√°lassz term√©ket' || !productHiddenInput.value) {
      showError(productHiddenInput, 'K√∂telez≈ë kiv√°lasztani egy term√©ket!');
      isValid = false;
    } else {
      clearError(productHiddenInput);
    }
    
    // Mennyis√©g valid√°l√°sa az els≈ë term√©ksorn√°l
    const quantityInput = firstProductRow.querySelector('.quantity');
    if (!quantityInput.value || isNaN(quantityInput.value) || parseInt(quantityInput.value) <= 0) {
      showError(quantityInput, 'K√∂telez≈ë megadni √©rv√©nyes mennyis√©get!');
      isValid = false;
    } else {
      clearError(quantityInput);
    }

    // Egys√©g√°r valid√°l√°sa az els≈ë term√©ksorn√°l - hi√°nyzott az eredeti k√≥db√≥l
    const unitPriceInput = firstProductRow.querySelector('.productUnitPrice');
    if (unitPriceInput && (!unitPriceInput.value || isNaN(unitPriceInput.value) || parseFloat(unitPriceInput.value) <= 0)) {
      showError(unitPriceInput, 'K√∂telez≈ë megadni √©rv√©nyes egys√©g√°rat!');
      isValid = false;
    } else if (unitPriceInput) {
      clearError(unitPriceInput);
    }
  }

 // A tov√°bbi term√©ksorok ellen≈ërz√©se
  const additionalProductRows = document.querySelectorAll('.productRowWrapper'); // minden term√©ksor
  additionalProductRows.forEach((rowWrapper, index) => {
    // ProductID valid√°l√°sa
    const productIDInput = rowWrapper.querySelector('.product_ID');
    if (productIDInput) {
      const productID = parseInt(productIDInput.value);
      if (isNaN(productID) || productID <= 0) {
        showError(productIDInput, `K√∂telez≈ë kiv√°lasztani term√©ket a ${index + 2}. sorban!`);
        isValid = false;
      } else {
        clearError(productIDInput);
      }
    }

    // Mennyis√©g valid√°l√°sa - egy sorban csak egy mennyis√©g mez≈ë van
    const quantityInput = rowWrapper.querySelector('.quantity');
    if (quantityInput) {
      const quantity = parseFloat(quantityInput.value);
      if (isNaN(quantity) || quantity <= 0) {
        showError(quantityInput, `K√∂telez≈ë megadni √©rv√©nyes mennyis√©get a ${index + 2}. sorban!`);
        isValid = false;
      } else {
        clearError(quantityInput);
      }
    }

    // Egys√©g√°r valid√°l√°sa - egy sorban csak egy egys√©g√°r mez≈ë van
    const unitPriceInput = rowWrapper.querySelector('.productUnitPrice');
    if (unitPriceInput) {
      const unitPrice = parseFloat(unitPriceInput.value);
      if (isNaN(unitPrice) || unitPrice <= 0) {
        showError(unitPriceInput, `K√∂telez≈ë megadni √©rv√©nyes egys√©g√°rat a ${index + 2}. sorban!`);
        isValid = false;
      } else {
        clearError(unitPriceInput);
      }
    }

    // Napl√≥z√°s
    console.log(`${index + 2}. sor √©rt√©kek ellen≈ërz√©se:`, { 
      productID: productIDInput ? parseInt(productIDInput.value) : 'hi√°nyzik',
      quantity: quantityInput ? parseFloat(quantityInput.value) : 'hi√°nyzik',
      unitPrice: unitPriceInput ? parseFloat(unitPriceInput.value) : 'hi√°nyzik'
    });
    
    // Ellen≈ërizz√ºk, hogy minden mez≈ë l√©tezik-e √©s valid √©rt√©kkel rendelkezik
    if (!productIDInput || !quantityInput || !unitPriceInput) {
      console.warn(`‚ö†Ô∏è ${index + 2}. sorban nem tal√°lhat√≥ minden sz√ºks√©ges mez≈ë`);
      isValid = false;
    } else {
      const productID = parseInt(productIDInput.value);
      const quantity = parseFloat(quantityInput.value);
      const unitPrice = parseFloat(unitPriceInput.value);
      
      if (isNaN(productID) || productID <= 0 ||
          isNaN(quantity) || quantity <= 0 ||
          isNaN(unitPrice) || unitPrice <= 0) {
        console.error(`‚ùå ${index + 2}. term√©ksor √©rv√©nytelen adatokkal:`, { productID, quantity, unitPrice });
        isValid = false;
      } else {
        console.log(`‚úÖ ${index + 2}. sor OK`);
      }
    }
  });

  // HA MINDEN RENDBEN, K√úLDJ√úK EL AZ ≈∞RLAPOT
  if (isValid) {
    const form = document.getElementById('applyNewStaffForm');
    
    // Az elad√≥ √©s vev≈ë adatainak lek√©r√©se
    const sellerID = await getLoggedInStaffID();
    const customerID = parseInt(document.querySelector('input[name="customer_ID"]').value);
    
    // Ellen≈ërz√©s: van-e elad√≥ azonos√≠t√≥
    if (isNaN(sellerID)) {
      alert('Hiba t√∂rt√©nt az elad√≥ azonos√≠t√°sakor!');
      return;
    }

    // Ellen≈ërz√©s: van-e vev≈ë azonos√≠t√≥
    if (isNaN(customerID)) {
      alert('√ârv√©nytelen vev≈ë azonos√≠t√≥!');
      return;
    }
    
    // R√âSZLETES NAPL√ìZ√ÅS - Term√©ksorok √∂sszegy≈±jt√©se
    console.log("--------- TERM√âKSOROK FELDOLGOZ√ÅSA KEZD≈êDIK ---------");
    console.log("Bejelentkezett elad√≥ ID:", sellerID);
    console.log("Kiv√°lasztott vev≈ë ID:", customerID);
    
    const saleData = [];
    
    // 1. Az els≈ë (eredeti) term√©ksor feldolgoz√°sa
    if (firstProductRow) {
      console.log("ELS≈ê TERM√âKSOR FELDOLGOZ√ÅSA:");
      
      const productIDInput = firstProductRow.querySelector('.product_ID');
      const quantityInput = firstProductRow.querySelector('.quantity');
      const unitPriceInput = firstProductRow.querySelector('.productUnitPrice');
      
      if (productIDInput && quantityInput && unitPriceInput) {
        const productID = parseInt(productIDInput.value);
        const quantity = parseInt(quantityInput.value);
        const unitPrice = parseFloat(unitPriceInput.value);
        
        if (!isNaN(productID) && !isNaN(quantity) && !isNaN(unitPrice) && 
            productID > 0 && quantity > 0 && unitPrice > 0) {
          const termekSorAdat = {
            staff_ID: sellerID,
            customer_ID: customerID,
            product_ID: productID,
            quantity_sale: quantity,
            unit_price: unitPrice
          };
          
          saleData.push(termekSorAdat);
          console.log('‚úÖ Els≈ë term√©ksor sikeresen feldolgozva:', termekSorAdat);
        } else {
          console.warn('‚ùå Els≈ë term√©ksor √©rv√©nytelen adatokkal:', { productID, quantity, unitPrice });
        }
      }
    }
    
    // 2. A tov√°bbi term√©ksorok feldolgoz√°sa
    console.log("TOV√ÅBBI TERM√âKSOROK FELDOLGOZ√ÅSA:");
    
    additionalProductRows.forEach((row, index) => {
      console.log(`--- ${index + 2}. TERM√âKSOR FELDOLGOZ√ÅSA ---`);
      
      const productIDInput = row.querySelector('.product_ID');
      const quantityInput = row.querySelector('.quantity');
      const unitPriceInput = row.querySelector('.productUnitPrice');
      
      // Ha b√°rmelyik mez≈ë nem l√©tezik vagy √©rv√©nytelen, ugorjuk √°t
      if (!productIDInput || !quantityInput || !unitPriceInput) {
        console.warn(`‚ö†Ô∏è ${index + 2}. term√©ksor kihagyva (hi√°nyz√≥ mez≈ëk).`);
        return;
      }
      
      const productID = parseInt(productIDInput.value);
      const quantity = parseInt(quantityInput.value);
      const unitPrice = parseFloat(unitPriceInput.value);
      
      if (!isNaN(productID) && !isNaN(quantity) && !isNaN(unitPrice) && 
          productID > 0 && quantity > 0 && unitPrice > 0) {
        const termekSorAdat = {
          staff_ID: sellerID,
          customer_ID: customerID,
          product_ID: productID,
          quantity_sale: quantity,
          unit_price: unitPrice
        };
        
        saleData.push(termekSorAdat);
        console.log(`‚úÖ ${index + 2}. term√©ksor sikeresen feldolgozva:`, termekSorAdat);
      } else {
        console.warn(`‚ùå ${index + 2}. term√©ksor √©rv√©nytelen adatokkal:`, { productID, quantity, unitPrice });
      }
    });
    
  console.log("----- √ñSSZES√çT√âS -----");
    console.log("Feldolgozott term√©ksorok sz√°ma:", saleData.length);
    
    if (saleData.length === 0) {
      alert('Nem siker√ºlt √©rv√©nyes term√©ksorokat tal√°lni! K√©rj√ºk, ellen≈ërizd az adatokat.');
      return;
    }

    try {
      const response = await submitSaleData(saleData);
      
      // Sikeres v√°lasz kezel√©se
      if (response) {
        // ≈∞rlap alaphelyzetbe √°ll√≠t√°sa
        form.reset();
        
        // Dropdownok alaphelyzetbe
        if (selectedCustomer) selectedCustomer.textContent = "V√°lassz √ºgyfelet";
        if (document.getElementById('customer_ID')) document.getElementById('customer_ID').value = "";
        
        // Az els≈ë term√©ksor alaphelyzetbe √°ll√≠t√°sa
        const firstProductDropdown = document.querySelector('.selectedProduct');
        if (firstProductDropdown) {
          firstProductDropdown.textContent = "V√°lassz term√©ket";
        }
        
        // Az √∂sszes hozz√°adott term√©ksor elt√°vol√≠t√°sa
        const productRowsContainer = document.getElementById('productRows');
        if (productRowsContainer) {
          productRowsContainer.innerHTML = '';
        }
        
        // Modal bez√°r√°sa
        if (typeof modal !== 'undefined' && modal) modal.classList.add('hidden');
        if (typeof overlay !== 'undefined' && overlay) overlay.classList.add('hidden');
        
        // Sikeres √ºzenet
        alert('Sikeres elad√°s!');
        location.reload();
      } else {
        throw new Error("Hib√°s v√°lasz a szervert≈ël");
      }
    } catch (error) {
      console.error('Hiba t√∂rt√©nt:', error);
      alert(`Hiba t√∂rt√©nt: ${error.message}`);
    }
  } else {
    // Hiba eset√©n g√∂rgess√ºnk az els≈ë hiba√ºzenethez
    const firstError = document.querySelector('.error-message');
    if (firstError) {
      firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
  }
});

// A MEGADOTT SUBMIT FUNKCI√ì
async function submitSaleData(userData) {
  try {
    // R√âSZLETES NAPL√ìZ√ÅS
    console.log("----------- ADATK√úLD√âS KEZD≈êDIK -----------");
    console.log("K√ºld√©s el≈ëtt - Term√©kek sz√°ma:", userData.length);
    console.log("K√ºld√©s el≈ëtt - Elk√ºldend≈ë adatok STRINGIFY el≈ëtt:", userData);
    const jsonData = JSON.stringify(userData);
    console.log("K√ºld√©s el≈ëtt - Elk√ºldend≈ë JSON adat:", jsonData);
    console.log("K√ºld√©s el≈ëtt - Elk√ºldend≈ë JSON adat hossza:", jsonData.length, "karakter");
    
    // K√ºl√∂n ki√≠ratjuk minden term√©k adatait
    userData.forEach((item, index) => {
      console.log(`Term√©k #${index + 1} adatai:`, {
        staff_ID: item.staff_ID,
        customer_ID: item.customer_ID,
        product_ID: item.product_ID,
        quantity_sale: item.quantity_sale,
        unit_price: item.unit_price
      });
    });
    
    console.log("H√≠v√°s URL:", `${API_URL}sale`);
    console.log("H√≠v√°s met√≥dus:", "POST");
    
    const response = await fetch(`${API_URL}sale`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: jsonData
    });
    
    console.log("Backend v√°lasz st√°tusz:", response.status);
    console.log("Backend v√°lasz OK?", response.ok);
    console.log("Backend v√°lasz st√°tusz sz√∂veg:", response.statusText);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error("Backend hiba√ºzenet (nyers):", errorText);
      let errorData;
      try {
        errorData = JSON.parse(errorText);
        console.error("Backend hiba√ºzenet (JSON):", errorData);
      } catch (e) {
        console.error("Nem siker√ºlt JSON-k√©nt √©rtelmezni a hiba√ºzenetet");
      }
      throw new Error(`Hiba a szerveren: ${errorData?.message || response.statusText || response.status}`);
    }

    const responseText = await response.text();
    console.log("Backend v√°lasz (nyers):", responseText);
    
    let data;
    try {
      data = JSON.parse(responseText);
      console.log("Backend v√°lasz (JSON-k√©nt √©rtelmezve):", data);
    } catch (e) {
      console.warn("Nem siker√ºlt JSON-k√©nt √©rtelmezni a v√°laszt:", e);
      // Ha nem JSON a v√°lasz, akkor a nyers sz√∂veget adjuk vissza
      data = responseText;
    }
    
    console.log("----------- ADATK√úLD√âS BEFEJEZVE -----------");
    return data;

  } catch (error) {
    console.error('‚ùå Hiba t√∂rt√©nt az elad√°s r√∂gz√≠t√©sekor:', error);
    console.error('Hiba r√©szletei:', error.stack);
    throw error;
  }
}
// SEG√âDF√úGGV√âNYEK
function showError(inputElement, message) {
  clearError(inputElement);

  const errorMessage = document.createElement('p');
  errorMessage.classList.add('error-message', 'text-red-500', 'text-sm', 'mt-1');
  errorMessage.textContent = message;

  inputElement.insertAdjacentElement('afterend', errorMessage);
}

function clearError(inputElement) {
  const next = inputElement.nextElementSibling;
  if (next && next.classList.contains('error-message')) {
    next.remove();
  }
}

function clearErrors(form) {
  form.querySelectorAll('.error-message').forEach(el => el.remove());
}

async function getLoggedInStaffID() {
  try {
    const response = await fetch(`${API_URL}username`);
    if (!response.ok) throw new Error('Nem siker√ºlt lek√©rni a bejelentkezett felhaszn√°l√≥t.');
    const data = await response.json();
    console.log("Bejelentkezett user adatai:", data);

    if (Array.isArray(data) && data.length > 0) {
      return data[0].staff_ID;
    } else {
      throw new Error('Nem tal√°ltam staff_ID-t a v√°laszban.');
    }
  } catch (err) {
    console.error(err);
    alert('Hiba t√∂rt√©nt a bejelentkezett elad√≥ lek√©rdez√©sekor.');
    return null;
  }
}


// ========BEV√âTELEZ√âS=========









// Gombok √©s a modal kiv√°laszt√°sa
const openBuyingModal = document.getElementById('openBuyingModal');
const closeBuyingModal = document.getElementById('closeBuyingModal');
const buyingModal = document.getElementById('buying-crud-modal');
const BuyingOverlay = document.getElementById('BuyingOverlay');
const apllyNewBuying = document.getElementById('apllyNewBuying');


// Modal megnyit√°sa
openBuyingModal.addEventListener('click', () => {
    buyingModal.classList.remove('hidden'); // Modal l√°that√≥v√° t√©tele
    buyingModal.classList.add('flex'); // Modal l√°that√≥v√° t√©tele
    BuyingOverlay.classList.remove('hidden');
    
    
});

// Modal bez√°r√°sa
closeBuyingModal.addEventListener('click', () => {
    buyingModal.classList.add('hidden'); // Modal elrejt√©se
    BuyingOverlay.classList.add('hidden');
    
});

// Bez√°r√°s, ha a felhaszn√°l√≥ a h√°tt√©rre kattint
buyingModal.addEventListener('click', (e) => {
    if (e.target === buyingModal) {
        buyingModal.classList.add('hidden');
        BuyingOverlay.classList.add('hidden');
    }
});












// Adatok szerkeszt√©se "ceruza ikonnal"
/*
document.addEventListener("DOMContentLoaded", function () {
    let selectedUserId = null;

    // Deleg√°lt esem√©nykezel≈ë a kuk√°khoz
    document.addEventListener("click", function (event) {
        let trashIcon = event.target.closest("a"); // Az <a> elemre figyel√ºnk
        if (trashIcon && trashIcon.querySelector("svg")) {
            event.preventDefault(); // Ne navig√°ljon el a "#" miatt
            selectedUserId = trashIcon.getAttribute("data-user-id");

            // Modal megjelen√≠t√©se
            document.getElementById("userDeleteModal").classList.remove("hidden");
            document.getElementById("userDeleteModaloverlay").classList.remove("hidden");
        }
    });

    // Modal bez√°r√°sa
    document.querySelectorAll("[data-modal-hide='userDeleteModal']").forEach(button => {
        button.addEventListener("click", function () {
            document.getElementById("userDeleteModal").classList.add("hidden");
            document.getElementById("userDeleteModaloverlay").classList.add("hidden");
        });
    });

    // T√∂rl√©s meger≈ës√≠t√©se
    document.querySelector(".text-white.bg-blue-600").addEventListener("click", function () {
        deleteUser(selectedUserId); // K√ºl√∂n f√ºggv√©ny megh√≠v√°sa
    });
});
*/
document.addEventListener("DOMContentLoaded", function () {
    document.querySelectorAll(".edit-btn").forEach((button) => {
      button.addEventListener("click", function (event) {
        event.preventDefault();

   
  
        // Az aktu√°lis sor kiv√°laszt√°sa
        let row = this.closest("tr");
  
        // Az √∂sszes szerkeszthet≈ë cella kiv√°laszt√°sa
        row.querySelectorAll("[data-editable='true']").forEach((cell) => {
          let text = cell.innerText.trim();
          let input = document.createElement("input");
          input.type = "text";
          input.value = text;
          input.className = "border px-2 py-1 w-full";
  
          // Ha elhagyja a mez≈ët, vissza√°ll√≠tja az √∫j √©rt√©ket
          input.addEventListener("blur", function () {
            cell.innerText = this.value;
          });
  
          cell.innerHTML = "";
          cell.appendChild(input);
          input.focus();
        });
      });
    });
  });
  

  /*

  document.addEventListener("DOMContentLoaded", function () {
    const editModal = document.getElementById("editModal");
    const saveChanges = document.getElementById("saveChanges");
    const closeUserSettingsMenuModal = document.getElementById("closeUserSettingsMenuModal");

    const tableBody = document.getElementById("employeesTable").querySelector("tbody"); // ez fontos!

    // ≈∞rlap mez≈ëk
    const editName = document.getElementById("editName");
    const editEmail = document.getElementById("editEmail");
    const editStatus = document.getElementById("editStatus");
    const editPosition = document.getElementById("editPosition");

    let editingRow = null;

    tableBody.addEventListener("click", function (event) {
        const button = event.target.closest(".edit-btn");

        if (button) {
            console.log("Szerkeszt√©s gombra kattintott√°l!");
            editingRow = button.closest("tr");
            console.log(button.closest("tr"))

            if (editingRow) {
                console.log("Szerkesztett sor:", editingRow);

                editName.value = editingRow.querySelector("td:nth-child(2)").textContent.trim();
                editEmail.value = editingRow.querySelector("td:nth-child(3)").textContent.trim();
                editStatus.value = editingRow.querySelector("td:nth-child(4)").textContent.trim();
                editPosition.value = editingRow.querySelector("td:nth-child(5)").textContent.trim();

                editModal.classList.remove("hidden");
            } else {
                console.warn("Nem tal√°lt szerkeszthet≈ë sort!");
            }
        }
    });

    closeUserSettingsMenuModal.addEventListener("click", function () {
        editModal.classList.add("hidden");
    });


    saveChanges.addEventListener("click", function () {
        
        console.log("SaveChanges gombra kattintott√°l");
        console.log("editingRow:", editingRow); // EZT ADD HOZZ√Å
        if (!editingRow) return;

        if (!editingRow) return;

    let fullName = editName.value.trim();
    let nameParts = fullName.split(" ");
    let lastName = nameParts[0] || "";
    let firstName = nameParts.slice(1).join(" ") || "";

    const updatedData = {
        id: editingRow.dataset.id, // A sor azonos√≠t√≥ja
        last_name: lastName,
        first_name: firstName,
        
        email: editEmail.value,
        status: editStatus.value,
        access_level: editPosition.value
    };
    
        // K√ºld√©s a backendnek
        fetch(`${API_URL}sale/${editingRow.dataset.id}`, {
            method: "PUT",
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json"
            },
            body: JSON.stringify(updatedData)
        })
        .then(response => response.json())
        
        .then(data => {
            console.log("Backend v√°lasz:", data);
            if (data) {
                // A frontend friss√≠t√©se
                
                editingRow.querySelector("td:nth-child(2)").textContent = updatedData.last_name + ' ' + updatedData.first_name;
                editingRow.querySelector("td:nth-child(3)").textContent = updatedData.email;
                editingRow.querySelector("td:nth-child(4)").textContent = updatedData.status;
                editingRow.querySelector("td:nth-child(5)").textContent = updatedData.access_level;
                
                editModal.classList.add("hidden");
                editingRow = null;
            } else {
                alert("Hiba t√∂rt√©nt a m√≥dos√≠t√°s sor√°n!");
            }
        })
        .catch(error => console.error("Hiba:", error));
    });

    // **Esem√©nykezel≈ë deleg√°l√°sa a t√°bl√°zatra**

    document.addEventListener("DOMContentLoaded", () => {
        tableBody.addEventListener("click", function (event) {
            const button = event.target.closest(".delete-btn"); // Csak akkor fut tov√°bb, ha delete-btn-re kattintottak
            if (!button) return;
    
            const saleId = button.getAttribute("data-id");
            if (!saleId) {
                console.error("Nincs √©rv√©nyes sale_ID.");
                return;
            }
    
            const confirmDelete = confirm(`Biztosan t√∂rl√∂d az ID: ${saleId} rekordot?`);
            if (!confirmDelete) return;
    
            const row = button.closest("tr");
    
            fetch(`${API_URL}sale/${saleId}`, {
                method: "DELETE"
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error("Hiba t√∂rt√©nt a t√∂rl√©s sor√°n.");
                }
                return response.json();
            })
            .then(data => {
                console.log("T√∂rl√©s sikeres:", data);
                if (row) row.remove(); // Sor elt√°vol√≠t√°sa, ha sikeres
            })
            .catch(error => {
                console.error("Hiba a t√∂rl√©s sor√°n:", error);
                alert("Hiba t√∂rt√©nt a t√∂rl√©s sor√°n.");
            });
        });
    });
    
});

*/





//√öj alkalazott felv√©tele Modal logik√°ja
// √öj alkalmazott hozz√°ad√°sa (POST)
// Az esem√©nykezel≈ë a form submitj√°ra
// Form submit kezel√©s
/*
applyNewStaffForm.addEventListener('submit', async (e) => {
  e.preventDefault();

  const form = e.target;
  const formData = new FormData(form);

  // Elad√≥ √©s Vev≈ë adatok
  const sellerID = formData.get('staff_ID');
  const customerID = formData.get('customer_ID');
  const productIDs = formData.getAll('product_ID[]');
  const quantities = formData.getAll('quantity[]');
  const prices = formData.getAll('price[]');

  // Hib√°k t√∂rl√©se indul√°skor
  const errorMessages = form.querySelectorAll('.error-message');
  errorMessages.forEach(error => error.remove());

  const allInputs = form.querySelectorAll('input, select');
  allInputs.forEach(input => {
    input.classList.remove('border-red-500');
  });

  let formIsValid = true;

  // Vev≈ë ellen≈ërz√©se
  const customerSelect = document.getElementById('customer_ID');

  if (!customerSelect || !customerSelect.value) {
    showError(customerSelect, 'K√∂telez≈ë kiv√°lasztani egy vev≈ët!');
    formIsValid = false;
  }

  // Term√©kek ellen≈ërz√©se
  const productInputs = form.querySelectorAll('input[name="product_ID[]"]');
  productInputs.forEach(input => {
    if (!input.value.trim()) {
      showError(input, 'K√∂telez≈ë megadni a term√©ket!');
      formIsValid = false;
    }
  });

  // Mennyis√©gek ellen≈ërz√©se
  const quantityInputs = document.querySelectorAll('input[name="quantity[]"]');
  quantityInputs.forEach((input) => {
    if (!input.value) {
      showError(input, 'K√∂telez≈ë mez≈ë!');
      formIsValid = false;
    }
  });

  if (!formIsValid) {
    return; // Nem megy tov√°bb, ha hiba van
  }

  // Ha minden j√≥, bez√°rjuk a modalt √©s elk√ºldj√ºk az adatokat
  const userData = {
    sellerID: parseInt(sellerID), // Sz√°mra konvert√°l√°s
    customerID: parseInt(customerID), // Sz√°mra konvert√°l√°s
    products: productIDs.map(id => parseInt(id)), // Term√©k ID-k sz√°mra konvert√°l√°sa
    quantities: quantities.map(qty => parseInt(qty)), // Mennyis√©gek sz√°mra konvert√°l√°sa
    prices: prices.map(price => parseFloat(price)) // √År sz√°mra konvert√°l√°sa
  };

  try {
    await addUser(userData);
    alert('Felhaszn√°l√≥ sikeresen hozz√°adva!');
    modal.classList.add('hidden'); // Modal bez√°r√°sa csak siker eset√©n
    overlay.classList.add('hidden');
  } catch (err) {
    console.error(err);
    alert('Hiba t√∂rt√©nt a felhaszn√°l√≥ hozz√°ad√°sakor.');
  }
});

// Hibakezel√©s seg√©df√ºggv√©nye
function showError(input, message) {
  const errorMessage = document.createElement('span');
  errorMessage.classList.add('error-message', 'text-red-500');
  errorMessage.textContent = message;
  input.classList.add('border-red-500');
  input.insertAdjacentElement('afterend', errorMessage);
}


*/

// Az addUser f√ºggv√©ny, amely elk√ºldi a POST k√©r√©st




document.addEventListener("DOMContentLoaded", function () {
  const dropdownBtn = document.getElementById("customerDropdownBtn");
  const dropdownOptions = document.getElementById("customerOptions");
  const selectedCustomer = document.getElementById("selectedCustomer");
  const customerInput = document.getElementById("customer_ID");

  // Toggle
  dropdownBtn.addEventListener("click", function (e) {
    e.preventDefault();
    dropdownOptions.classList.toggle("hidden");
  });

  document.addEventListener("click", function (e) {
    if (
      !dropdownBtn.contains(e.target) &&
      !dropdownOptions.contains(e.target)
    ) {
      dropdownOptions.classList.add("hidden");
    }
  });

  // Partner bet√∂lt√©s
  Promise.all([
    fetch(`${API_URL}sale`),
    fetch(`${API_URL}partner`),
    fetch(`${API_URL}product`),
  ])
    .then(([saleRes, partnerRes]) =>
      Promise.all([saleRes.json(), partnerRes.json()])
    )
    .then(([saleData, partnerData]) => {
      // T√°bl√°zat renderel√©s, ha kell
      if (typeof renderTable === "function") {
        window.employeesData = saleData;
        renderTable();
      }

      dropdownOptions.innerHTML = "";

      partnerData
      //a vev≈ëk ABC sorrendbe helyez√©se a leg√∂rd√ºl≈ë men√ºben
      .filter(partner => partner.status === 0) // csak a st√°tusz 0-√°sokat engedi √°t
      .sort((a, b) => {
        const nameA = (a.name || `${a.last_name} ${a.first_name}`).toLowerCase();
        const nameB = (b.name || `${b.last_name} ${b.first_name}`).toLowerCase();
        return nameA.localeCompare(nameB);
      })
      .forEach((partner) => {
        const displayName =
          partner.name || `${partner.last_name} ${partner.first_name}`;
        const li = document.createElement("li");
        li.textContent = displayName;
        li.setAttribute("data-value", partner.customer_ID);
        li.className = "px-4 py-2 cursor-pointer hover:bg-blue-100";
        li.addEventListener("click", function () {
          selectedCustomer.textContent = displayName;
          customerInput.value = partner.customer_ID;
          dropdownOptions.classList.add("hidden");
        });
        dropdownOptions.appendChild(li);
        console.log(partner)
      });
    })
    .catch((error) => {
      console.error("Hiba az adatok bet√∂lt√©sekor:", error);
    });

  // === BESZ√ÅLL√çT√ìK leg√∂rd√ºl≈ë bet√∂lt√©se ===
  const supplierButton = document.getElementById("selectedSupplier");
  const supplierOptions = document.getElementById("supplierOptions");
  const supplierInput = document.getElementById("supplier_ID");

  // Hely, ahov√° a besz√°ll√≠t√≥ nev√©t ki√≠rjuk:
  const supplierTextSpan = supplierButton.querySelector("span");

  // Toggle leg√∂rd√ºl≈ë
  supplierButton.addEventListener("click", (e) => {
    e.preventDefault();
    supplierOptions.classList.toggle("hidden");
  });

  // Bez√°r√°s m√°shova kattint√°s eset√©n
  document.addEventListener("click", function (e) {
    if (!supplierButton.contains(e.target) && !supplierOptions.contains(e.target)) {
      supplierOptions.classList.add("hidden");
    }
  });

  // Partner lista bet√∂lt√©se besz√°ll√≠t√≥khoz (status == 1 pl.)
  fetch(`${API_URL}partner`)
    .then((res) => res.json())
    .then((partnerData) => {
      supplierOptions.innerHTML = "";

      partnerData
        .filter(p => p.status === 1) // itt besz√°ll√≠t√≥i st√°tuszt felt√©telez√ºnk
        .sort((a, b) => {
          const nameA = (a.name || `${a.last_name} ${a.first_name}`).toLowerCase();
          const nameB = (b.name || `${b.last_name} ${b.first_name}`).toLowerCase();
          return nameA.localeCompare(nameB);
        })
        .forEach((partner) => {
          const displayName = partner.name || `${partner.last_name} ${partner.first_name}`;
          const li = document.createElement("li");
          li.textContent = displayName;
          li.className = "px-4 py-2 cursor-pointer hover:bg-blue-100";
          li.addEventListener("click", function () {
            supplierTextSpan.textContent = displayName;
            supplierInput.value = partner.customer_ID;
            supplierOptions.classList.add("hidden");
          });
          supplierOptions.appendChild(li);
        });
    })
    .catch((error) => {
      console.error("Hiba a besz√°ll√≠t√≥k bet√∂lt√©sekor:", error);
    });
});

document.addEventListener("DOMContentLoaded", function () {
  const productGrid = document.getElementById("productRows");
  const addProductButton = document.getElementById("addProductRow");

  // Term√©kek bet√∂lt√©se egyszer
  if (!window.productDataLoaded) {
    fetch(`${API_URL}product`)
      .then((res) => res.json())
      .then((productData) => {
        window.productData = productData;
        window.productDataLoaded = true;
        initAllDropdowns();
      })
      .catch((error) => {
        console.error("Hiba a term√©kek bet√∂lt√©sekor:", error);
      });
  } else {
    initAllDropdowns();
  }

  function initAllDropdowns() {
    const dropdownButtons = document.querySelectorAll(".productDropdownBtn");
    dropdownButtons.forEach(initDropdownLogic);
  }

  function initDropdownLogic(button) {
    const wrapper = button.closest(".flex-1");
    const options = wrapper.querySelector(".productOptions");
    const selectedProduct = button.querySelector(".selectedProduct");
    const productInput = wrapper.querySelector(".product_ID");

    button.addEventListener("click", function (e) {
      e.preventDefault();
      options.classList.toggle("hidden");
    });

    document.addEventListener("click", function (e) {
      if (!button.contains(e.target) && !options.contains(e.target)) {
        options.classList.add("hidden");
      }
    });

    fillDropdown(options, selectedProduct, productInput, window.productData, button);
  }

  // A fillDropdown f√ºggv√©nyt m√≥dos√≠tom a bev√©telz√©si formhoz
  function fillDropdown(options, selectedProduct, productInput, data, button) {
    options.innerHTML = "";
    data
      .sort((a, b) => a.product_name.localeCompare(b.product_name))
      .forEach((product) => {
        const li = document.createElement("li");
        li.textContent = product.product_name;
        li.setAttribute("data-value", product.product_ID);
        li.className = "px-4 py-2 cursor-pointer hover:bg-blue-100";

        li.addEventListener("click", function () {
          selectedProduct.textContent = product.product_name;
          productInput.value = product.product_ID;
          options.classList.add("hidden");
        
          const fullRow = button.closest(".productRow");
          const priceInput = fullRow ? fullRow.querySelector('.productUnitPrice') : null;
          
          // Itt a beszerz√©si √°rat (product_price) haszn√°ljuk bev√©telz√©sn√©l
          if (priceInput && product.product_profit_price !== undefined) {
            priceInput.value = product.product_profit_price;
          }
        });

        options.appendChild(li);
      });
  }

  // √öj term√©ksor hozz√°ad√°sa
  addProductButton.addEventListener("click", function () {
    addNewProductRow();
  });

  // Kiszervezett f√ºggv√©ny az √∫j term√©ksorok hozz√°ad√°s√°hoz
  function addNewProductRow() {
    const newRow = document.createElement("div");
    newRow.className = "flex flex-col sm:flex-row gap-4 w-full productRowWrapper";

    newRow.innerHTML = `
  <div class="flex-1 relative productRow">
    <label class="block mt-2 mb-2 text-sm font-medium text-gray-900 dark:text-gray-900">Term√©k neve</label>
    <button type="button" class="productDropdownBtn w-full bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg px-4 py-2.5 text-left focus:outline-none focus:ring-2 focus:ring-blue-500 relative">
      <span class="selectedProduct">V√°lassz term√©ket</span>
      <svg class="w-5 h-5 absolute right-3 top-1/2 -translate-y-1/2 pointer-events-none text-gray-400" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
        <path d="M19 9l-7 7-7-7" />
      </svg>
    </button>
    <ul class="productOptions absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-md text-sm hidden max-h-60 overflow-auto">
    </ul>
    <input type="hidden" class="product_ID" required>
    <span class="text-red-500 text-sm hidden">Mez≈ë kit√∂lt√©se k√∂telez≈ë</span>
    <button type="button" class="removeProductRow text-sm text-red-500 hover:underline mt-2">
      - Term√©k elt√°vol√≠t√°sa
    </button>
  </div>

  <div class="flex-1">
    <label class="block mt-2 mb-2 text-sm font-medium text-gray-900 dark:text-gray-900">Mennyis√©g</label>
    <input type="number" class="quantity bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-red-500 focus:border-red-500 block w-full p-2.5" placeholder="Mennyis√©g" required>
    <span class="text-red-500 text-sm hidden">Mez≈ë kit√∂lt√©se k√∂telez≈ë</span>
  </div>

  <div class="flex-1">
    <label class="block mt-2 mb-2 text-sm font-medium text-gray-900 dark:text-gray-900">Egys√©g√°r</label>
    <input type="number" name="price" class="productUnitPrice bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5" placeholder="Egys√©g√°r">
    <span class="text-red-500 text-sm hidden">Mez≈ë kit√∂lt√©se k√∂telez≈ë</span>
  </div>
`;

    productGrid.appendChild(newRow);

    // Inicializ√°ljuk az √∫j dropdown-t
    const newButton = newRow.querySelector(".productDropdownBtn");
    initDropdownLogic(newButton);
    
    // Hozz√°adjuk az esem√©nyfigyel≈ët a t√∂rl√©s gombhoz
    const removeButton = newRow.querySelector(".removeProductRow");
    removeButton.addEventListener("click", function () {
      newRow.remove();
    });
  }

  // Esem√©nyfigyel≈ë l√©trehoz√°sa a dinamikusan hozz√°adott term√©ksorokhoz
  document.addEventListener('click', function(event) {
    // Ha a kattint√°s egy term√©k listaelem volt
    if (event.target.closest('ul.productOptions li')) {
      const li = event.target.closest('li');
      const options = li.closest('.productOptions');
      const button = options.previousElementSibling;
      const fullRow = button.closest('.productRow');
      
      // Ellen≈ërizz√ºk, hogy van-e product_ID √©s term√©k adat
      const productID = li.getAttribute('data-value');
      if (productID && window.productData) {
        // Megkeress√ºk a kiv√°lasztott term√©ket
        const selectedProduct = window.productData.find(p => p.product_ID == productID);
        if (selectedProduct) {
          // Be√°ll√≠tjuk az egys√©g√°rat
          const priceInput = fullRow.parentElement.querySelector('.productUnitPrice');
          if (priceInput && selectedProduct.product_profit_price !== undefined) {
            priceInput.value = selectedProduct.product_profit_price;
          }
        }
      }
    }
  });
});



  const buyingForm = document.getElementById("buyingForm");
  const buyingSubmitBtn = document.getElementById("submitBuyingForm");
  
  if (buyingForm && buyingSubmitBtn) {
    buyingSubmitBtn.addEventListener("click", async function (event) {
      event.preventDefault();
  
      clearErrors(buyingForm);
      let isValid = true;
  
      // 1. Besz√°ll√≠t√≥ valid√°l√°s
      const selectedSupplier = document.getElementById("selectedSupplier");
      const supplierHiddenInput = document.getElementById("supplier_ID");
  
      if (!supplierHiddenInput?.value || selectedSupplier?.textContent === "V√°lassz besz√°ll√≠t√≥t") {
        showError(supplierHiddenInput, "K√∂telez≈ë kiv√°lasztani egy besz√°ll√≠t√≥t!");
        isValid = false;
      }
  
      // 2. Term√©k valid√°l√°s
      const productInputs = buyingForm.querySelectorAll(".product_ID");
      const productTexts = buyingForm.querySelectorAll(".selectedProduct");
  
      productInputs.forEach((input, index) => {
        if (!input.value || productTexts[index]?.textContent === "V√°lassz term√©ket") {
          showError(input, "K√∂telez≈ë kiv√°lasztani egy term√©ket!");
          isValid = false;
        }
      });
  
      // 3. Mennyis√©g valid√°l√°s
      const quantityInputs = buyingForm.querySelectorAll("input[name='quantity']");
      quantityInputs.forEach(input => {
        if (!input.value || isNaN(input.value) || parseInt(input.value) <= 0) {
          showError(input, "K√∂telez≈ë megadni √©rv√©nyes mennyis√©get!");
          isValid = false;
        }
      });
  
      // 4. Egys√©g√°r valid√°l√°s
      const priceInputs = buyingForm.querySelectorAll("input[name='price']");
      priceInputs.forEach(input => {
        if (!input.value || isNaN(input.value) || parseFloat(input.value) <= 0) {
          showError(input, "√ârv√©nytelen egys√©g√°r!");
          isValid = false;
        }
      });

      function validateCustomDropdowns() {
        let isValid = true;
    
        // Besz√°ll√≠t√≥ valid√°l√°s
        const supplierInput = document.querySelector('#supplier_ID');
        const supplierError = supplierInput.closest('.relative').querySelector('.error-message');
    
        if (!supplierInput.value) {
            supplierError.classList.remove('hidden');
            isValid = false;
        } else {
            supplierError.classList.add('hidden');
        }
    
        // Term√©k valid√°l√°s (minden sorban)
        const productInputs = document.querySelectorAll('input[name="product_ID"]');
        productInputs.forEach(input => {
            const errorSpan = input.closest('.relative').querySelector('span.text-red-500');
            if (!input.value) {
                errorSpan.classList.remove('hidden');
                isValid = false;
            } else {
                errorSpan.classList.add('hidden');
            }
        });
    
        return isValid;
    }
  
      if (!isValid) return;
  
      const formData = new FormData(buyingForm);
      const staffID = await getLoggedInStaffID();
      const supplierID = parseInt(formData.get("supplier_ID"));
      const productIDs = formData.getAll("product_ID").map(id => parseInt(id));
      const quantities = formData.getAll("quantity").map(q => parseInt(q));
      const billNumber = formData.get("bill_number");
  
      console.log('sellerID:', staffID);
      console.log('supplierID:', supplierID);
      console.log('productIDs:', productIDs);
      console.log('quantities:', quantities);
  
      if (
        isNaN(staffID) ||
        isNaN(supplierID) ||
        productIDs.length === 0 ||
        quantities.length === 0 ||
        productIDs.some(id => isNaN(id)) ||
        quantities.some(q => isNaN(q))
      ) {
        alert("Hib√°s vagy hi√°nyos adatok!");
        return;
      }
  
      // Adatok strukt√∫r√°z√°sa a backend √°ltal v√°rt form√°tumban
      const buyingData = productIDs.map((productID, index) => ({
        staff_ID: staffID,
        customer_ID: supplierID, // Az √ºgyf√©l ID-ja (besz√°ll√≠t√≥)
        product_ID: productID,
        quantity_buy: quantities[index],
        bill_number: billNumber // Tetsz≈ëleges sz√°mlasz√°m, ha sz√ºks√©ges
      }));
  
      // Az adatok elk√ºld√©se a backendnek
      const result = await submitBuyingData(buyingData);
      console.log("Visszakapott adat:", result);
  
      // Ha sikeres a v√°lasz, akkor friss√≠tj√ºk a t√°bl√°zatot
      if (result && result.length > 0) {
        // √öj rekordok hozz√°ad√°sa a t√°bl√°zathoz
        result.forEach(entry => {
          employeesData.unshift({
            ...entry,
            type: "Bev√©telez√©s",
            id: entry.buy_ID,
            bill_number: entry.bill_number || billNumber,
            date: entry.buy_date,
            total_price: entry.total_price,
            customer_ID: entry.customer_ID
          });
        });
  
        // Id≈ërend szerinti √∫jrarendez√©s (ha kell)
        employeesData.sort((a, b) => new Date(b.buy_date || b.sale_date) - new Date(a.buy_date || a.sale_date));
  
        // A t√°bl√°zat √∫jrarenderel√©se
        renderTable(); 
      }
  
      // Form √ºr√≠t√©se
      buyingForm.reset();
      document.getElementById("selectedSupplier").textContent = "V√°lassz besz√°ll√≠t√≥t";
      document.getElementById("supplier_ID").value = "";
  
      document.querySelectorAll(".productRow").forEach(row => {
        row.querySelector(".selectedProduct").textContent = "V√°lassz term√©ket";
        row.querySelector(".product_ID").value = "";
        row.querySelector(".productUnitPrice").value = "";
      });
  
      // Modal bez√°r√°sa
      buyingModal.classList.add("hidden");
      BuyingOverlay.classList.add("hidden");
    });
  }


  
  
  async function submitBuyingData(data) {
    try {
      const response = await fetch(`${API_URL}buy`, {
        method: "POST",
        headers: { 
          "Content-Type": "application/json",
          "Accept": "application/json"
        },
        body: JSON.stringify(data)
      });
  
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || "Hiba a bev√©telz√©s sor√°n");
      }
  
      const result = await response.json();
      
      // Friss√≠tj√ºk a t√°bl√°zatot az √∫j adatokkal
      result.forEach(item => {
        employeesData.unshift({
          ...item,
          type: "Bev√©telez√©s",
          id: item.buy_ID,
          date: item.buy_date
        });
      });
  
      renderTable();
      return result;
      
    } catch (error) {
      console.error("Bev√©telz√©si hiba:", error);
      alert(`Hiba t√∂rt√©nt: ${error.message}`);
      return null;
    }
  }

// T√∂rl√©s 
async function deleteSaleByBillNumber(billNumber) {
  const item = employeesData.find(emp => emp.bill_number.endsWith(`-${billNumber}`));
  if (!item) return alert("Nem tal√°lhat√≥ az elem a megadott sz√°mlasz√°mmal.");

  if (!confirm(`Biztosan sztorn√≥zn√°d a(z) ${item.bill_number} sz√°m√∫ sz√°ml√°t?`)) return;

  try {
    const response = await fetch(`${API_URL}sale/delete/${billNumber}`, {
      method: "POST"
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || "Hiba t√∂rt√©nt a sztorn√≥z√°s sor√°n.");
    }

    const newItems = await response.json();

    if (!Array.isArray(newItems)) {
      throw new Error("Hib√°s v√°laszform√°tum a szervert≈ël.");
    }

    alert("Sikeres sztorn√≥z√°s! M√≠nuszos sz√°mla l√©trehozva.");

    // Hozz√°adjuk a m√≠nuszos sz√°mlasorokat
    employeesData.push(...newItems);

    renderTable();
  } catch (err) {
    console.error("Sztorn√≥ hiba:", err);
    alert(`Hiba: ${err.message}`);
  }
}




// Szerkeszt√©s 
function editSale(id) {
  const item = employeesData.find(emp => emp.id == id);

  if (!item) return alert("Nem tal√°lhat√≥ az elem.");

  if (item.type !== "Elad√°s") {
    alert("Csak elad√°st lehet szerkeszteni.");
    return;
  }

  openEditModal(item); // megl√©v≈ë modal nyit√≥ logika
}










function openEditModal(item) {
  // Felt√©telezz√ºk, hogy minden input elem ID-ja megfelel≈ë
  document.getElementById("editName").value = item.product_name;
  document.getElementById("editEmail").value = item.quantity_sale;
  document.getElementById("editStatus").value = item.total_price;

  // Ment√©shez sz√ºks√©g lesz az ID-ra is, amit k√ºl√∂n el kell t√°rolni
  document.getElementById("saveChanges").dataset.id = item.sale_ID;

  document.getElementById("editModal").classList.remove("hidden");
}



// Bez√°r√°s gomb
document.getElementById("closeUserSettingsMenuModal").addEventListener("click", () => {
  document.getElementById("editModal").classList.add("hidden");
});



