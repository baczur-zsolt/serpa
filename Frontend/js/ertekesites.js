import { API_URL } from './config.js';
//Pagination

const tableBody = document.querySelector("#employeesTable tbody");
const rowsPerPage = 10;
let currentPage = 1;
let employeesData = [];
let productsData = [];

const EXCLUDED_BILLS_KEY = 'excludedBillNumbers'; // localStorage kulcs
const STORNO_BILLS_KEY = 'stornoBillNumbers'; // √öj kulcs a sztorn√≥ sz√°ml√°khoz

// Kiz√°rt sz√°mlasz√°mok bet√∂lt√©se localStorage-b√≥l
function loadExcludedBillNumbers() {
    try {
        const storedData = localStorage.getItem(EXCLUDED_BILLS_KEY);
        return storedData ? JSON.parse(storedData) : [];
    } catch (err) {
        console.error("Hiba a kiz√°rt sz√°mlasz√°mok bet√∂lt√©sekor:", err);
        return [];
    }
}

// Sztorn√≥ sz√°mlasz√°mok bet√∂lt√©se localStorage-b√≥l
function loadStornoBillNumbers() {
    try {
        const storedData = localStorage.getItem(STORNO_BILLS_KEY);
        return storedData ? JSON.parse(storedData) : [];
    } catch (err) {
        console.error("Hiba a sztorn√≥ sz√°mlasz√°mok bet√∂lt√©sekor:", err);
        return [];
    }
}

// Kiz√°rt sz√°mlasz√°mok ment√©se localStorage-ba
function saveExcludedBillNumbers(billNumbers) {
    try {
        localStorage.setItem(EXCLUDED_BILLS_KEY, JSON.stringify(Array.from(billNumbers)));
    } catch (err) {
        console.error("Hiba a kiz√°rt sz√°mlasz√°mok ment√©sekor:", err);
    }
}

// Sztorn√≥ sz√°mlasz√°mok ment√©se localStorage-ba
function saveStornoBillNumbers(billNumbers) {
    try {
        localStorage.setItem(STORNO_BILLS_KEY, JSON.stringify(Array.from(billNumbers)));
    } catch (err) {
        console.error("Hiba a sztorn√≥ sz√°mlasz√°mok ment√©sekor:", err);
    }
}

Promise.all([
  fetch(`${API_URL}sale`, { cache: "no-store" }),
  fetch(`${API_URL}buy`, { cache: "no-store" }),
  fetch(`${API_URL}partner`, { cache: "no-store" }),
  fetch(`${API_URL}sale`, { cache: "no-store" })
])
  .then(([saleRes, buyRes, partnerRes, saleDetailsRes]) => {
    return Promise.all([
      saleRes.json(),
      buyRes.json(),
      partnerRes.json(),
      saleDetailsRes.json()
    ]);
  })
  .then(([saleData, buyData, partnerData, saleDetails]) => {
    // Kombin√°lt adat l√©trehoz√°sa
    const combinedData = [
      ...saleData.map(item => ({
        ...item,
        type: "Elad√°s",
        id: item.sale_ID,
        date: item.sale_date,
        comment: item.comment?.startsWith("A(z) ") ? item.comment.slice(5) : item.comment
      })),
      ...buyData.map(item => ({
        ...item,
        type: "Bev√©telez√©s",
        id: item.buy_ID,
        date: item.buy_date
      }))
    ];

    // Csak azok a t√©telek, amelyekn√©l a quantity_sale nem negat√≠v (ezt m√°r nem sz≈±rj√ºk ki)
    const filteredData = combinedData;

    // Adatok rendez√©se d√°tum alapj√°n (leg√∫jabb el√∂l)
    filteredData.sort((a, b) => new Date(b.date) - new Date(a.date));

    // Glob√°lis adatt√°rol√≥k friss√≠t√©se
    employeesData = filteredData;
    productsData = partnerData;

    // Sztorn√≥ kapcsolatok fel√©p√≠t√©se √©s friss√≠t√©se
    updateStornoRelationships();

    // T√°bl√°zat renderel√©se
    renderTable();
  })
  .catch(error => {
    console.error("Hiba az adatok bet√∂lt√©se k√∂zben:", error);
  });

// Sztorn√≥ kapcsolatok fel√©p√≠t√©se √©s localStorage friss√≠t√©se
function updateStornoRelationships() {
    // Gy≈±jts√ºk √∂ssze az eredeti sz√°ml√°kat (kiz√°rand√≥) √©s a sztorn√≥ sz√°ml√°kat (megjelen√≠tend≈ë)
    const excludedBillNumbers = new Set(loadExcludedBillNumbers());
    const stornoBillNumbers = new Set(loadStornoBillNumbers());
    
    // El≈ësz√∂r megtal√°ljuk az √∂sszes sztorn√≥zott sz√°ml√°t √©s annak eredeti sz√°ml√°j√°t
    employeesData.forEach(item => {
        // Ellen≈ërizz√ºk, hogy sztorn√≥zott sz√°ml√°r√≥l van-e sz√≥
        const isStorno = item.comment && 
                        (item.comment.includes("j√≥v√°√≠r√°sa") || 
                         item.comment.includes("j√≥v√°√≠r√°s")) &&
                        (item.quantity_sale < 0 || item.total_price < 0);
        
        if (isStorno) {
            // A sztorn√≥ sz√°ml√°t megjel√∂lj√ºk, NEM z√°rjuk ki
            if (item.bill_number) {
                stornoBillNumbers.add(item.bill_number);
            }
            
            // Az eredeti sz√°mla azonos√≠t√≥j√°nak kinyer√©se a kommentb≈ël
            const originalBillNumberMatch = item.comment?.match(/A\(z\) ([^\s]+) sz√°m√∫/);
            if (originalBillNumberMatch && originalBillNumberMatch[1]) {
                const originalBillNumber = originalBillNumberMatch[1];
                // Csak az eredeti sz√°ml√°t z√°rjuk ki
                excludedBillNumbers.add(originalBillNumber);
                console.log(`Kiz√°rva CSAK az eredeti sz√°mla: ${originalBillNumber}`);
            }
        }
    });
    
    console.log("Kiz√°rt sz√°mlasz√°mok (eredeti sz√°ml√°k):", Array.from(excludedBillNumbers));
    console.log("Sztorn√≥ sz√°mlasz√°mok (megjelen√≠tend≈ë):", Array.from(stornoBillNumbers));
    
    // Ments√ºk el a localStorage-ba
    saveExcludedBillNumbers(excludedBillNumbers);
    saveStornoBillNumbers(stornoBillNumbers);
}

// Azonos sz√°mlasz√°m√∫ t√©telek √∂sszevon√°sa
function groupItemsByBillNumber(items) {
    const billGroups = new Map();
    
    items.forEach(item => {
        if (!item.bill_number) {
            // Ha nincs sz√°mlasz√°m, egyedi kezel√©s (pl. bev√©telez√©s)
            const uniqueKey = `no-bill-${item.id}`;
            billGroups.set(uniqueKey, [item]);
            return;
        }
        
        // Ha m√°r l√©tezik ez a sz√°mlasz√°m a Map-ben, akkor hozz√°adjuk az √∫j t√©telt
        if (billGroups.has(item.bill_number)) {
            billGroups.get(item.bill_number).push(item);
        } else {
            // Ha m√©g nem l√©tezik, √∫j t√∂mb√∂t hozunk l√©tre
            billGroups.set(item.bill_number, [item]);
        }
    });
    
    // √ñsszevont t√©telek l√©trehoz√°sa
    const groupedItems = [];
    
    billGroups.forEach((items, billNumber) => {
        if (items.length === 1) {
            // Ha csak egy t√©tel van, nincs mit √∂sszevonni
            groupedItems.push(items[0]);
        } else {
            // T√∂bb t√©tel eset√©n √∂sszevonjuk ≈ëket
            const firstItem = items[0];
            
            // Az els≈ë elem adatait vessz√ºk alapul √©s √∂sszes√≠tj√ºk az √©rt√©keket
            const groupedItem = {
                ...firstItem,
                // Az √∂sszes t√©tel √°r√°nak √∂sszege
                total_price: items.reduce((sum, item) => sum + (parseFloat(item.total_price) || 0), 0),
                // Az √∂sszes t√©tel darabsz√°m√°nak √∂sszege
                quantity_sale: items.reduce((sum, item) => sum + (parseFloat(item.quantity_sale) || 0), 0),
                // Az eredeti t√©telek t√°rol√°sa egy k√ºl√∂n t√∂mbben
                originalItems: items,
                // Ha b√°rmelyik t√©tel sztorn√≥, az √∂sszevont t√©tel is sztorn√≥ lesz
                isGrouped: true,
                // Megjegyz√©sek √∂sszef≈±z√©se, ha k√ºl√∂nb√∂znek
                comment: Array.from(new Set(items.map(item => item.comment).filter(Boolean))).join('; ')
            };
            
            groupedItems.push(groupedItem);
        }
    });
    
    return groupedItems;
}

// üîπ T√°bl√°zat friss√≠t√©se az aktu√°lis oldallal
function renderTable() {
    tableBody.innerHTML = "";  // Clear table
    
    // Mobile view clearing
    if (typeof mobileView !== 'undefined' && mobileView) {
        mobileView.innerHTML = ""; // Clear mobile view if exists
    }

    // Kiz√°rt sz√°mlasz√°mok √©s sztorn√≥ sz√°mlasz√°mok bet√∂lt√©se localStorage-b√≥l
    const excludedBillNumbers = new Set(loadExcludedBillNumbers());
    const stornoBillNumbers = new Set(loadStornoBillNumbers());
    
    console.log("Renderel√©s sor√°n kiz√°rt sz√°mlasz√°mok:", Array.from(excludedBillNumbers));
    console.log("Renderel√©s sor√°n sztorn√≥ sz√°mlasz√°mok:", Array.from(stornoBillNumbers));
    
    // Sz≈±rj√ºk az adatokat, hogy csak az eredeti sz√°ml√°kat z√°rjuk ki, a sztorn√≥ sz√°ml√°kat megtartjuk
    const filteredData = employeesData.filter(item => {
        // Ha nincs sz√°mlasz√°m, megtartjuk (bev√©telez√©s lehet)
        if (!item.bill_number) {
            return true;
        }
        
        // Ha a sz√°mlasz√°m szerepel a kiz√°rand√≥k k√∂z√∂tt (eredeti sz√°ml√°k), akkor kisz≈±rj√ºk
        if (excludedBillNumbers.has(item.bill_number)) {
            console.log(`Kisz≈±rt eredeti sz√°mla: ${item.bill_number}`);
            return false;
        }
        
        return true;
    });

    // Azonos sz√°mlasz√°m√∫ t√©telek √∂sszevon√°sa
    const groupedData = groupItemsByBillNumber(filteredData);
    
    console.log(`Eredeti adatok sz√°ma: ${employeesData.length}, Sz≈±rt adatok sz√°ma: ${filteredData.length}, √ñsszevont adatok sz√°ma: ${groupedData.length}`);

    let start = (currentPage - 1) * rowsPerPage;
    let end = start + rowsPerPage;
    let paginatedItems = groupedData.slice(start, end);

    // T√°bl√°zat renderel√©se
    paginatedItems.forEach(user => {
        const customer = productsData.find(p => p.customer_ID === user.customer_ID);
        const customerName = customer ? `${customer.last_name} ${customer.first_name}` : "N/A";
        const transactionType = user.type || "Elad√°s";
        const customerStatus = customer ? (customer.status === 0 ? "V√°s√°rl√≥" : "Besz√°ll√≠t√≥") : "N/A";
        
        // Ellen≈ërizz√ºk, hogy sztorn√≥ sz√°ml√°r√≥l van-e sz√≥
        const isStorno = user.bill_number && stornoBillNumbers.has(user.bill_number);
        
        // Csoportos√≠tott t√©telek eset√©n vizu√°lis jelz√©s
        const isGrouped = user.isGrouped && user.originalItems && user.originalItems.length > 1;
        const groupedItemsCount = isGrouped ? user.originalItems.length : 1;

        // Table row - sztorn√≥ sz√°mla eset√©n piros h√°tt√©r, csoportos√≠tott t√©telek eset√©n halv√°nyk√©k h√°tt√©r
        let row = document.createElement("tr");
        row.classList.add("hover:bg-gray-100");
        if (isStorno) {
            row.classList.add("bg-red-100"); // Piros h√°tt√©r a sztorn√≥ sz√°ml√°knak
        } else if (isGrouped) {
            row.classList.add("bg-blue-50"); // Halv√°nyk√©k h√°tt√©r az √∂sszevont t√©teleknek
        }
        row.id = user.id;
        row.innerHTML = `
            <td class="hidden">${user.id || user.buy_ID || user.sale_ID}</td>
            <td class="px-6 py-4">
                ${user.bill_number || 'N/A'}
                ${isGrouped ? `<span class="ml-2 px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800">${groupedItemsCount} t√©tel</span>` : ''}
            </td>
            <td class="px-6 py-4 font-semibold ${transactionType === "Elad√°s" ? (isStorno ? 'text-red-500' : 'text-green-500') : 'text-blue-500'}">
                ${isStorno ? 'Sztorn√≥ ' : ''}${transactionType}
            </td>
            <td class="px-6 py-4">
                ${user.sale_date ? `${user.sale_date}<br>` : ""}
                ${user.buy_date ? `${user.buy_date}` : ""}
            </td>
            <td class="px-6 py-4">${customerName}</td>
            <td class="px-6 py-4">${user.total_price.toLocaleString('hu-HU')} Ft</td>
            <td class="px-6 py-4">
                <div class="flex justify-center gap-4">
                    ${transactionType === "Elad√°s" ? `
                        <button class="view-btn desktop-view-btn" view-bill="${user.bill_number}">
                            <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#009df7">
                                <path d="M480-320q75 0 127.5-52.5T660-500q0-75-52.5-127.5T480-680q-75 0-127.5 52.5T300-500q0 75 52.5 127.5T480-320Zm0-72q-45 0-76.5-31.5T372-500q0-45 31.5-76.5T480-608q45 0 76.5 31.5T588-500q0 45-31.5 76.5T480-392Zm0 192q-146 0-266-81.5T40-500q54-137 174-218.5T480-800q146 0 266 81.5T920-500q-54 137-174 218.5T480-200Zm0-300Zm0 220q113 0 207.5-59.5T832-500q-50-101-144.5-160.5T480-720q-113 0-207.5 59.5T128-500q50 101 144.5 160.5T480-280Z"/>
                            </svg>
                        </button>
                        <button class="download-btn desktop-download-btn" data-bill="${user.bill_number}">
                            <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#009df7">
                                <path d="M480-337q-8 0-15-2.5t-13-8.5L308-492q-12-12-11.5-28t11.5-28q12-12 28.5-12.5T365-549l75 75v-286q0-17 11.5-28.5T480-800q17 0 28.5 11.5T520-760v286l75-75q12-12 28.5-11.5T652-548q11 12 11.5 28T652-492L508-348q-6 6-13 8.5t-15 2.5ZM240-160q-33 0-56.5-23.5T160-240v-80q0-17 11.5-28.5T200-360q17 0 28.5 11.5T240-320v80h480v-80q0-17 11.5-28.5T760-360q17 0 28.5 11.5T800-320v80q0 33-23.5 56.5T720-160H240Z"/>
                            </svg>
                        </button>
                    ` : ""}

                    <button class="delete-btn text-red-600 hover:text-red-800" data-id="${user.bill_number || user.bill_number}">
                        <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#ff6666">
                            <path d="M280-120q-33 0-56.5-23.5T200-200v-520q-17 0-28.5-11.5T160-760q0-17 11.5-28.5T200-800h160q0-17 11.5-28.5T400-840h160q17 0 28.5 11.5T600-800h160q17 0 28.5 11.5T800-760q0 17-11.5 28.5T760-720v520q0 33-23.5 56.5T680-120H280Zm400-600H280v520h400v-520ZM400-280q17 0 28.5-11.5T440-320v-280q0-17-11.5-28.5T400-640q-17 0-28.5 11.5T360-600v280q0 17 11.5 28.5T400-280Zm160 0q17 0 28.5-11.5T600-320v-280q0-17-11.5-28.5T560-640q-17 0-28.5 11.5T520-600v280q0 17 11.5 28.5T560-280ZM280-720v520-520Z"/>
                        </svg>
                    </button>
                </div>
            </td>
        `;
        tableBody.appendChild(row);

        // Create mobile card view if mobileView exists
        if (typeof mobileView !== 'undefined' && mobileView) {
            const mobileCard = document.createElement("div");
            mobileCard.className = `bg-white shadow-md rounded-lg p-4 mb-4 border border-gray-200 ${isStorno ? 'bg-red-100' : ''} ${isGrouped ? 'bg-blue-50' : ''}`;
            mobileCard.setAttribute("data-id", user.customer_ID);
            mobileCard.innerHTML = `
                <div class="flex justify-between items-start mb-2">
                    <h3 class="text-lg font-semibold text-gray-900">${customerName}</h3>
                    <div class="flex gap-2">
                        ${transactionType === "Elad√°s" ? `
                            <button class="view-btn desktop-view-btn" view-bill="${user.bill_number}">
                                <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#009df7">
                                    <path d="M480-320q75 0 127.5-52.5T660-500q0-75-52.5-127.5T480-680q-75 0-127.5 52.5T300-500q0 75 52.5 127.5T480-320Zm0-72q-45 0-76.5-31.5T372-500q0-45 31.5-76.5T480-608q45 0 76.5 31.5T588-500q0 45-31.5 76.5T480-392Zm0 192q-146 0-266-81.5T40-500q54-137 174-218.5T480-800q146 0 266 81.5T920-500q-54 137-174 218.5T480-200Zm0-300Zm0 220q113 0 207.5-59.5T832-500q-50-101-144.5-160.5T480-720q-113 0-207.5 59.5T128-500q50 101 144.5 160.5T480-280Z"/>
                                </svg>
                            </button>
                            <button class="download-btn desktop-download-btn" data-bill="${user.bill_number}">
                                <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#009df7">
                                    <path d="M480-337q-8 0-15-2.5t-13-8.5L308-492q-12-12-11.5-28t11.5-28q12-12 28.5-12.5T365-549l75 75v-286q0-17 11.5-28.5T480-800q17 0 28.5 11.5T520-760v286l75-75q12-12 28.5-11.5T652-548q11 12 11.5 28T652-492L508-348q-6 6-13 8.5t-15 2.5ZM240-160q-33 0-56.5-23.5T160-240v-80q0-17 11.5-28.5T200-360q17 0 28.5 11.5T240-320v80h480v-80q0-17 11.5-28.5T760-360q17 0 28.5 11.5T800-320v80q0 33-23.5 56.5T720-160H240Z"/>
                                </svg>
                            </button>
                        ` : ""}
                        <button class="delete-btn text-red-600 hover:text-red-800" data-id="${user.bill_number || user.bill_number}">
                            <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#ff6666">
                                <path d="M280-120q-33 0-56.5-23.5T200-200v-520q-17 0-28.5-11.5T160-760q0-17 11.5-28.5T200-800h160q0-17 11.5-28.5T400-840h160q17 0 28.5 11.5T600-800h160q17 0 28.5 11.5T800-760q0 17-11.5 28.5T760-720v520q0 33-23.5 56.5T680-120H280Zm400-600H280v520h400v-520ZM400-280q17 0 28.5-11.5T440-320v-280q0-17-11.5-28.5T400-640q-17 0-28.5 11.5T360-600v280q0 17 11.5 28.5T400-280Zm160 0q17 0 28.5-11.5T600-320v-280q0-17-11.5-28.5T560-640q-17 0-28.5 11.5T520-600v280q0 17 11.5 28.5T560-280ZM280-720v520-520Z"/>
                            </svg>
                        </button>
                    </div>
                </div>
                <p class="text-sm text-gray-700">
                    <span class="font-medium">Sz√°mla:</span> ${user.bill_number || 'N/A'}
                    ${isGrouped ? `<span class="ml-2 px-2 py-0.5 text-xs font-semibold rounded-full bg-blue-100 text-blue-800">${groupedItemsCount} t√©tel</span>` : ''}
                </p>
                <p class="text-sm text-gray-700">
                    <span class="font-medium">T√≠pus:</span> 
                    <span class="${transactionType === "Elad√°s" ? (isStorno ? 'text-red-500' : 'text-green-500') : 'text-blue-500'}">
                        ${isStorno ? 'Sztorn√≥ ' : ''}${transactionType}
                    </span>
                </p>
                <p class="text-sm text-gray-700">
                    <span class="font-medium">D√°tum:</span> 
                    ${user.sale_date ? `${user.sale_date}<br>` : ""}${user.buy_date ? `${user.buy_date}` : ""}
                </p>
                <p class="text-sm text-gray-700"><span class="font-medium">√ñsszeg:</span> ${user.total_price.toLocaleString('hu-HU')} Ft</p>
            `;

            mobileView.appendChild(mobileCard);
        }
    });

    // Pagination friss√≠t√©se, ha l√©tezik a generatePageNumbers f√ºggv√©ny
    if (typeof generatePageNumbers === 'function') {
        generatePageNumbers();
    }
    
    window.scrollTo({
        top: 0,
        left: 0,
        behavior: 'smooth'
    });
}
/*
Promise.all([
  fetch(`${API_URL}sale`),
  fetch(`${API_URL}partner`)
])
.then(([saleRes, productRes]) => {
  return Promise.all([saleRes.json(), productRes.json()]);
})
.then(([saleData, productData]) => {
  employeesData = saleData;
  productsData = productData;
  renderTable(); // Itt m√°r a m√≥dos√≠tott renderTable h√≠v√≥dik
})
.catch(error => {
  console.error("Hiba a let√∂lt√©sn√©l:", error);
});
*/
// ablak √°tm√©retez√©s figyel≈ë
window.addEventListener('resize', () => {
  renderTable();
});

// Seg√©df√ºggv√©ny a sztorn√≥zott sz√°ml√°k sz≈±r√©s√©hez
function filterOutStornoInvoices(invoices) {
    const stornoOriginalNumbers = new Set();
    
    // 1. Gy≈±jts√ºk √∂ssze az eredeti sz√°mlasz√°mokat a sztorn√≥k commentjeib≈ël
    invoices.forEach(invoice => {
        if (invoice.comment && invoice.comment.includes("j√≥v√°√≠r√°sa")) {
            const match = invoice.comment.match(/A\(z\) (.*?) sz√°m√∫ sz√°mla j√≥v√°√≠r√°sa/);
            if (match && match[1]) {
                stornoOriginalNumbers.add(match[1]);
            }
        }
    });
    
    // 2. Sz≈±rj√ºk ki a sztorn√≥kat √©s az eredeti sz√°ml√°kat is
    return invoices.filter(invoice => {
        // Ha ez egy sztorn√≥ sz√°mla
        if (invoice.comment && invoice.comment.includes("j√≥v√°√≠r√°sa")) {
            return false;
        }
        
        // Ha ehhez a sz√°ml√°hoz van sztorn√≥
        if (stornoOriginalNumbers.has(invoice.bill_number)) {
            return false;
        }
        
        return true;
    });
}




// T√∂rl√©s
async function deleteSale(billNumber) {
    console.log("T√∂rl√©shez haszn√°lt billNumber:", billNumber);
    
    if (!billNumber) {
        alert("√ârv√©nytelen sz√°mlasz√°m!");
        return;
    }

    // Sz√°mlasz√°m feldolgoz√°sa
    const billNumberParts = billNumber.split('-');
    const billNumberSuffix = billNumberParts[billNumberParts.length - 1].padStart(6, '0');

    // Elem keres√©se - figyel√ºnk a nullish √©rt√©kekre is
    const item = employeesData.find(emp => {
        if (!emp.bill_number) return false;
        const empParts = emp.bill_number.split('-');
        return empParts[empParts.length - 1] === billNumberSuffix;
    });

    if (!item) {
        alert(`Nem tal√°lhat√≥ az elem a megadott sz√°mlasz√°mmal: ${billNumber}`);
        return;
    }

    // M√°r l√©tez≈ë sztorn√≥ ellen≈ërz√©se
    const existingStorno = employeesData.find(emp => 
        emp.comment?.includes(`A(z) ${item.bill_number} sz√°m√∫ sz√°mla j√≥v√°√≠r√°sa.`));

    if (existingStorno) {
        alert("Ehhez a sz√°ml√°hoz m√°r k√©sz√ºlt j√≥v√°√≠r√≥ sz√°mla!");
        return;
    }

    // Ellen≈ërizz√ºk, hogy ez a sz√°mla nem maga is egy sztorn√≥-e
    if (item.quantity_sale < 0 || item.total_price < 0 || 
        (item.comment && item.comment.includes("j√≥v√°√≠r√°sa"))) {
        alert("Ez a sz√°mla m√°r maga is egy sztorn√≥ sz√°mla, ezt nem lehet sztorn√≥zni!");
        return;
    }

    if (!confirm(`Biztosan sztorn√≥zn√°d a(z) ${item.bill_number} sz√°m√∫ sz√°ml√°t?`)) return;

    try {
        // Sztorn√≥ adatok el≈ëk√©sz√≠t√©se
        const itemsToReverse = employeesData.filter(emp => emp.bill_number === item.bill_number);
        
        if (itemsToReverse.length === 0) {
            alert("Nem tal√°lhat√≥k a sztorn√≥zand√≥ sz√°mla t√©telei!");
            return;
        }

        const reversalData = itemsToReverse.map(emp => ({
            staff_ID: emp.staff_ID,
            customer_ID: emp.customer_ID,
            product_ID: emp.product_ID,
            quantity_sale: emp.quantity_sale * -1, // Negat√≠v √©rt√©kkel √°ll√≠tjuk be
            comment: `A(z) ${emp.bill_number} sz√°m√∫ sz√°mla j√≥v√°√≠r√°sa.`
        }));

        // API h√≠v√°s
        const response = await fetch(`${API_URL}sale/delete/${billNumberSuffix}`, {
            method: "POST",
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(reversalData)
        });

        let responseText = '';
        try {
            responseText = await response.text();
        } catch (err) {
            console.error("V√°lasz sz√∂veg olvas√°si hiba:", err);
        }

        if (!response.ok) {
            throw new Error(responseText || `HTTP hiba! St√°tusz: ${response.status}`);
        }

        // A szerver v√°lasz√°nak feldolgoz√°sa
        let result;
        try {
            // Csak akkor pr√≥b√°ljuk JSON-k√©nt √©rtelmezni, ha t√©nyleg van tartalom
            if (responseText && responseText.trim()) {
                result = JSON.parse(responseText);
            }
        } catch (err) {
            console.error("V√°lasz JSON feldolgoz√°si hiba:", err);
            // Nem √°ll√≠tjuk le a folyamatot, lehet, hogy nem JSON v√°laszt kaptunk
        }

        // Sikeres sztorn√≥z√°s feldolgoz√°sa - ak√°r kaptunk JSON v√°laszt, ak√°r nem
        if (result && Array.isArray(result) && result.length > 0) {
            // Szerver √°ltal visszaadott sztorn√≥ sz√°ml√°k hozz√°ad√°sa
            employeesData.push(...result);
            console.log("Sztorn√≥ sikeres, szerver √°ltal visszaadott adatok hozz√°adva:", result);
        } else {
            console.warn("A szerver nem adott vissza elemeket, manu√°lisan adjuk hozz√° a sztorn√≥ t√©telt");
            
            // Seg√©df√ºggv√©ny az √∫j sz√°mlasz√°m gener√°l√°s√°hoz, ha nincs defini√°lva
            const generateNewBillNumber = () => {
                // Ha van ilyen f√ºggv√©ny, haszn√°ld azt
                if (typeof window.generateNewBillNumber === 'function') {
                    return window.generateNewBillNumber();
                }
                
                // Ha nincs, gener√°lunk egy ideiglenes sz√°mlasz√°mot
                const date = new Date();
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');
                
                return `STORNO-${year}${month}${day}-${random}`;
            };
            
            // Sztorn√≥ t√©telek l√©trehoz√°sa
            const newItems = reversalData.map(item => {
                // A megfelel≈ë term√©k nev√©nek megtal√°l√°sa
                const originalItem = employeesData.find(e => e.product_ID === item.product_ID);
                
                return {
                    ...item,
                    type: "Elad√°s",
                    bill_number: generateNewBillNumber(),
                    product_name: originalItem?.product_name || "Ismeretlen term√©k",
                    date: new Date().toISOString().split('T')[0], // Mai d√°tum
                    total_price: -(originalItem?.total_price || 0), // Negat√≠v √©rt√©k
                    id: `storno_${Date.now()}_${Math.random().toString(36).substr(2, 9)}` // Egyedi azonos√≠t√≥
                };
            });
            
            employeesData.push(...newItems);
        }

        // Ments√ºk el a sztorn√≥zott √©s az eredeti sz√°ml√°t a kiz√°rtakhoz
        const excludedBillNumbers = new Set(loadExcludedBillNumbers());
        
        // Az eredeti sz√°mla kiz√°r√°sa
        excludedBillNumbers.add(item.bill_number);
        
        // Az √∫j sztorn√≥ sz√°mla kiz√°r√°sa (ha van)
        if (result && Array.isArray(result) && result.length > 0) {
            result.forEach(storno => {
                if (storno.bill_number) excludedBillNumbers.add(storno.bill_number);
            });
        }
        
        // Ments√ºk el a friss√≠tett kiz√°rt sz√°ml√°kat
        saveExcludedBillNumbers(excludedBillNumbers);
        
        alert("Sikeres sztorn√≥z√°s! J√≥v√°√≠r√≥ sz√°mla l√©trehozva.");
        
        // Friss√≠ts√ºk a sztorn√≥ kapcsolatokat √©s renderelj√ºk √∫jra a t√°bl√°zatot
        updateStornoRelationships();
        renderTable();

    } catch (err) {
        console.error("Sztorn√≥ hiba:", err);
        alert(`Hiba t√∂rt√©nt a sztorn√≥z√°s sor√°n: ${err.message}`);
    }
}


// Seg√©df√ºggv√©ny az √∫j sz√°mlasz√°m gener√°l√°s√°hoz
function generateNewBillNumber() {
    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1).padStart(2, '0');
    const prefix = `ST-${year}-`;
    
    const lastStorno = employeesData
        .filter(e => e.bill_number.startsWith(prefix))
        .sort()
        .pop();
    
    const lastNumber = lastStorno 
        ? parseInt(lastStorno.bill_number.split('-')[2]) 
        : 0;
    
    return `${prefix}${String(lastNumber + 1).padStart(6, '0')}`;
}


//Event delegation a k√ºl√∂nb√∂z≈ë gombokhoz
document.addEventListener('click', function(event) {
  // Let√∂lt√©s gombok
  const downloadBtn = event.target.closest('.download-btn');
  if (downloadBtn) {
      const billNumber = downloadBtn.getAttribute('data-bill');
      downloadInvoice(billNumber);
      return;
  }

  // Megtekint√©s gombok
  const viewBtn = event.target.closest('.view-btn');
  if (viewBtn) {
      const billNumber = viewBtn.getAttribute('view-bill');
      const formattedBillNumber = billNumber.slice(8);
      const url = `http://localhost/serpa/invoice/${formattedBillNumber}`;
      window.open(url, '_blank');
      return;
  }

  // Szerkeszt√©s gombok
  const editBtn = event.target.closest('.edit-btn');
  if (editBtn) {
      const saleId = editBtn.getAttribute('data-id');
      // Itt h√≠vd meg a szerkeszt√©s f√ºggv√©nyed
      editSale(saleId);
      return;
  }

  // T√∂rl√©s gombok
  const deleteBtn = event.target.closest('.delete-btn');
  if (deleteBtn) {
      const saleId = deleteBtn.getAttribute('data-id');
      // Itt h√≠vd meg a t√∂rl√©s f√ºggv√©nyed
      deleteSale(saleId);
      return;
  }
});

// Let√∂lt≈ë f√ºggv√©ny
function downloadInvoice(billNumber) {
  if (!billNumber) {
      console.error("Hiba: billNumber nincs megadva");
      return;
  }

  const formattedBillNumber = billNumber.slice(8);
  const url = `${API_URL}invoice/${formattedBillNumber}`;

  fetch(url)
      .then(response => {
          if (!response.ok) {
              throw new Error(`Hiba a sz√°mla let√∂lt√©sekor: ${response.statusText}`);
          }
          return response.blob();
      })
      .then(blob => {
          const downloadUrl = window.URL.createObjectURL(blob);
          const a = document.createElement("a");
          a.href = downloadUrl;
          a.download = `szamla_${formattedBillNumber}.pdf`;
          document.body.appendChild(a);
          a.click();
          a.remove();
          window.URL.revokeObjectURL(downloadUrl);
      })
      .catch(error => {
          console.error("Hiba:", error);
      });



        // Event delegation a t√°bl√°zat soraiban
        tableBody.addEventListener("click", function(e) {
            if (e.target.closest(".edit-btn")) {
                const id = e.target.closest(".edit-btn").dataset.id;
                const item = employeesData.find(emp => emp.sale_ID == id);
                openEditModal(item);
            } else if (e.target.closest(".delete-btn")) {
                const id = e.target.closest(".delete-btn").dataset.id;
                deleteSale(id);
            }
        });

//PDF let√∂lt√©s
        document.querySelectorAll('.pdfDownload-btn').forEach(button => {
            button.addEventListener('click', function() {
              const saleID = this.getAttribute('data-id');
          
              // Itt lek√©rheted az adott sorhoz tartoz√≥ adatokat (pl. product, quantity, price, stb.)
              // Ezut√°n gener√°lhatod a PDF-et √©s let√∂ltheted
          
              const doc = new jsPDF();
          
              // P√©lda adat
              const productName = "Term√©k neve"; // Itt adhatod hozz√° az adatokat, amik sz√ºks√©gesek
              const quantity = "Mennyis√©g";
              const price = "√År";
          
              doc.setFontSize(16);
              doc.text("PDF gener√°l√°s: " + productName, 20, 20);
              doc.setFontSize(12);
              doc.text(`Mennyis√©g: ${quantity}`, 20, 30);
              doc.text(`√År: ${price}`, 20, 40);
          
              // PDF let√∂lt√©s
              doc.save(`sale_${saleID}.pdf`);
            });
          });



// Ment√©s gomb esem√©ny
document.getElementById("saveChanges").addEventListener("click", async function () {
    const id = this.dataset.id;
    const updatedData = {
        product_name: document.getElementById("editName").value,
        quantity_sale: parseInt(document.getElementById("editEmail").value),
        total_price: parseFloat(document.getElementById("editStatus").value),
        sale_date: document.getElementById("editPosition").value
    };
    

    const response = await fetch(`${API_URL}sale/${id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(updatedData)
        
    });
    console.log(updatedData);
    if (response.ok) {
        const index = employeesData.findIndex(emp => emp.sale_ID == id);
        employeesData[index] = { ...employeesData[index], ...updatedData };
        renderTable();
         // PDF gener√°l√°sa
        const doc = new jsPDF();
        doc.setFontSize(16);
        doc.text("PDF gener√°l√°s: " + updatedData.product_name, 20, 20);
        doc.setFontSize(12);
        doc.text(`Mennyis√©g: ${updatedData.quantity_sale}`, 20, 30);
        doc.text(`√År: ${updatedData.total_price}`, 20, 40);
        doc.text(`D√°tum: ${updatedData.sale_date}`, 20, 50);

        // PDF let√∂lt√©se
        doc.save(`sale_${id}.pdf`);
        document.getElementById("editModal").classList.add("hidden");
    } else {
        alert("Hiba a friss√≠t√©s sor√°n!");
    }
});


function editSale(id) {
  const item = employeesData.find(emp => emp.id == id);

  if (!item) return alert("Nem tal√°lhat√≥ az elem.");

  if (item.type !== "Elad√°s") {
    alert("Csak elad√°st lehet szerkeszteni.");
    return;
  }

  openEditModal(item); // megl√©v≈ë modal nyit√≥ logika
}

// P√©ld√°ul k√∂zvetlen√ºl a script bet√∂lt√©sekor:
if (!window.mobileViewHandlerAdded) {
    mobileView.addEventListener("click", function(e) {
        if (e.target.closest(".edit-btn")) {
            const id = e.target.closest(".edit-btn").dataset.id;
            const item = employeesData.find(emp => emp.sale_ID == id);
            openEditModal(item);
        } else if (e.target.closest(".delete-btn")) {
            const id = e.target.closest(".delete-btn").dataset.id;
            deleteSale(id);
        }
    });
    window.mobileViewHandlerAdded = true; // jel√∂l√©s, hogy m√°r hozz√°d lett adva
}

        
        
        
    }

function generatePageNumbers() {
    const totalPages = Math.ceil(employeesData.length / rowsPerPage);
    const pageNumbersDiv = document.getElementById("pageNumbers");

    pageNumbersDiv.innerHTML = ""; // Clear page numbers

    for (let i = 1; i <= totalPages; i++) {
        const pageButton = document.createElement("button");
        pageButton.textContent = i;
        pageButton.classList.add("page-button", "rounded-md", "border", "border-slate-300", "py-2", "px-3", "text-center", "text-sm", "transition-all", "shadow-sm", "hover:shadow-lg", "text-slate-600", "hover:text-white", "hover:bg-blue-600", "hover:border-blue-600", "focus:text-white", "focus:bg-blue-600", "focus:border-blue-600", "active:border-blue-600", "active:text-white", "active:bg-blue-800", "disabled:pointer-events-none", "disabled:opacity-50", "disabled:shadow-none", "ml-2");

        // Disable current page button
        if (i === currentPage) {
            pageButton.disabled = true;
            pageButton.classList.add("bg-blue-600", "text-white");
        } else {
            pageButton.addEventListener("click", () => {
                currentPage = i;
                renderTable();
            });
        }

        pageNumbersDiv.appendChild(pageButton);
    }
}

// üîπ K√∂vetkez≈ë oldal
function nextPage() {
    if (currentPage < Math.ceil(employeesData.length / rowsPerPage)) {
        currentPage++;
        renderTable();
    }
}

// üîπ El≈ëz≈ë oldal
function prevPage() {
    if (currentPage > 1) {
        currentPage--;
        renderTable();
    }
}

// üîπ Els≈ë megjelen√≠t√©s
renderTable();


document.getElementById("prevBtn").addEventListener("click", prevPage);
document.getElementById("nextBtn").addEventListener("click", nextPage);







//Alkalmazott felv√©tele Modal

// Gombok √©s a modal kiv√°laszt√°sa
// Modal kezel√©s alapfunkci√≥k
const openModal = document.getElementById('openModal');
const closeModal = document.getElementById('closeModal');
const modal = document.getElementById('crud-modal');
const overlay = document.getElementById('overlay');
const userDeleteModal = document.getElementById('userDeleteModal');
const applyNewStaff = document.getElementById('applyNewStaff');
const applyNewStaffForm = document.getElementById('applyNewStaffForm');

// Modal megnyit√°sa
if (openModal) {
  openModal.addEventListener('click', () => {
    modal.classList.remove('hidden');
    modal.classList.add('flex');
    overlay.classList.remove('hidden');
  });
}

// Modal bez√°r√°sa
if (closeModal) {
  closeModal.addEventListener('click', () => {
    modal.classList.add('hidden');
    overlay.classList.add('hidden');
  });
}

// Bez√°r√°s, ha h√°tt√©rre kattint
if (modal) {
  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      modal.classList.add('hidden');
      overlay.classList.add('hidden');
    }
  });
}

// Seg√©df√ºggv√©nyek - glob√°lisak, hogy mindk√©t modul haszn√°lhassa
function showError(inputElement, message) {
  clearError(inputElement);

  const errorMessage = document.createElement('p');
  errorMessage.classList.add('error-message', 'text-red-500', 'text-sm', 'mt-1');
  errorMessage.textContent = message;

  inputElement.insertAdjacentElement('afterend', errorMessage);
}

function clearError(inputElement) {
  const next = inputElement.nextElementSibling;
  if (next && next.classList.contains('error-message')) {
    next.remove();
  }
}

function clearErrors(form) {
  form.querySelectorAll('.error-message').forEach(el => el.remove());
}

async function getLoggedInStaffID() {
  try {
    const response = await fetch(`${API_URL}username`);
    if (!response.ok) throw new Error('Nem siker√ºlt lek√©rni a bejelentkezett felhaszn√°l√≥t.');
    const data = await response.json();
    console.log("Bejelentkezett user adatai:", data);

    if (Array.isArray(data) && data.length > 0) {
      return data[0].staff_ID;
    } else {
      throw new Error('Nem tal√°ltam staff_ID-t a v√°laszban.');
    }
  } catch (err) {
    console.error(err);
    alert('Hiba t√∂rt√©nt a bejelentkezett elad√≥ lek√©rdez√©sekor.');
    return null;
  }
}

// ========== ELAD√ÅS MODUL ==========

// Elad√°s bek√ºld√©s
if (applyNewStaff) {
  applyNewStaff.addEventListener('click', async function(event) {
    event.preventDefault();

    // √ñsszes hiba√ºzenet t√∂rl√©se
    clearErrors(document.getElementById('applyNewStaffForm'));
    
    let isValid = true;

    // 1. VEV≈ê VALID√ÅL√ÅSA
    const selectedCustomer = document.getElementById('selectedCustomer');
    const customerHiddenInput = document.getElementById('customer_ID');

    if (selectedCustomer.textContent === 'V√°lassz √ºgyfelet' || !customerHiddenInput.value) {
      showError(customerHiddenInput, 'K√∂telez≈ë kiv√°lasztani egy √ºgyfelet!');
      isValid = false;
    } else {
      clearError(customerHiddenInput);
    }

    // 2. TERM√âKSOROK VALID√ÅL√ÅSA
    // Az els≈ë term√©ksor ellen≈ërz√©se
    const firstProductRow = document.querySelector('.productRow:not([id])'); // Az eredeti term√©ksor
    if (firstProductRow) {
      const selectedProduct = firstProductRow.querySelector('.selectedProduct');
      const productHiddenInput = firstProductRow.querySelector('.product_ID');

      if (selectedProduct.textContent === 'V√°lassz term√©ket' || !productHiddenInput.value) {
        showError(productHiddenInput, 'K√∂telez≈ë kiv√°lasztani egy term√©ket!');
        isValid = false;
      } else {
        clearError(productHiddenInput);
      }
      
      // Mennyis√©g valid√°l√°sa az els≈ë term√©ksorn√°l
      const quantityInput = firstProductRow.querySelector('.quantity');
      if (!quantityInput.value || isNaN(quantityInput.value) || parseInt(quantityInput.value) <= 0) {
        showError(quantityInput, 'K√∂telez≈ë megadni √©rv√©nyes mennyis√©get!');
        isValid = false;
      } else {
        clearError(quantityInput);
      }

      // Egys√©g√°r valid√°l√°sa az els≈ë term√©ksorn√°l
      const unitPriceInput = firstProductRow.querySelector('.productUnitPrice');
      if (unitPriceInput && (!unitPriceInput.value || isNaN(unitPriceInput.value) || parseFloat(unitPriceInput.value) <= 0)) {
        showError(unitPriceInput, 'K√∂telez≈ë megadni √©rv√©nyes egys√©g√°rat!');
        isValid = false;
      } else if (unitPriceInput) {
        clearError(unitPriceInput);
      }
    }

   // A tov√°bbi term√©ksorok ellen≈ërz√©se
    const additionalProductRows = document.querySelectorAll('.productRowWrapper'); // minden term√©ksor
    additionalProductRows.forEach((rowWrapper, index) => {
      // ProductID valid√°l√°sa
      const productIDInput = rowWrapper.querySelector('.product_ID');
      if (productIDInput) {
        const productID = parseInt(productIDInput.value);
        if (isNaN(productID) || productID <= 0) {
          showError(productIDInput, `K√∂telez≈ë kiv√°lasztani term√©ket a ${index + 2}. sorban!`);
          isValid = false;
        } else {
          clearError(productIDInput);
        }
      }

      // Mennyis√©g valid√°l√°sa
      const quantityInput = rowWrapper.querySelector('.quantity');
      if (quantityInput) {
        const quantity = parseFloat(quantityInput.value);
        if (isNaN(quantity) || quantity <= 0) {
          showError(quantityInput, `K√∂telez≈ë megadni √©rv√©nyes mennyis√©get a ${index + 2}. sorban!`);
          isValid = false;
        } else {
          clearError(quantityInput);
        }
      }

      // Egys√©g√°r valid√°l√°sa
      const unitPriceInput = rowWrapper.querySelector('.productUnitPrice');
      if (unitPriceInput) {
        const unitPrice = parseFloat(unitPriceInput.value);
        if (isNaN(unitPrice) || unitPrice <= 0) {
          showError(unitPriceInput, `K√∂telez≈ë megadni √©rv√©nyes egys√©g√°rat a ${index + 2}. sorban!`);
          isValid = false;
        } else {
          clearError(unitPriceInput);
        }
      }

      // Napl√≥z√°s
      console.log(`${index + 2}. sor √©rt√©kek ellen≈ërz√©se:`, { 
        productID: productIDInput ? parseInt(productIDInput.value) : 'hi√°nyzik',
        quantity: quantityInput ? parseFloat(quantityInput.value) : 'hi√°nyzik',
        unitPrice: unitPriceInput ? parseFloat(unitPriceInput.value) : 'hi√°nyzik'
      });
    });

    // HA MINDEN RENDBEN, K√úLDJ√úK EL AZ ≈∞RLAPOT
    if (isValid) {
      const form = document.getElementById('applyNewStaffForm');
      
      // Az elad√≥ √©s vev≈ë adatainak lek√©r√©se
      const sellerID = await getLoggedInStaffID();
      const customerID = parseInt(document.querySelector('input[name="customer_ID"]').value);
      
      // Ellen≈ërz√©s: van-e elad√≥ azonos√≠t√≥
      if (isNaN(sellerID)) {
        alert('Hiba t√∂rt√©nt az elad√≥ azonos√≠t√°sakor!');
        return;
      }

      // Ellen≈ërz√©s: van-e vev≈ë azonos√≠t√≥
      if (isNaN(customerID)) {
        alert('√ârv√©nytelen vev≈ë azonos√≠t√≥!');
        return;
      }
      
      // R√âSZLETES NAPL√ìZ√ÅS - Term√©ksorok √∂sszegy≈±jt√©se
      console.log("--------- TERM√âKSOROK FELDOLGOZ√ÅSA KEZD≈êDIK ---------");
      console.log("Bejelentkezett elad√≥ ID:", sellerID);
      console.log("Kiv√°lasztott vev≈ë ID:", customerID);
      
      const saleData = [];
      
      // 1. Az els≈ë (eredeti) term√©ksor feldolgoz√°sa
      if (firstProductRow) {
        console.log("ELS≈ê TERM√âKSOR FELDOLGOZ√ÅSA:");
        
        const productIDInput = firstProductRow.querySelector('.product_ID');
        const quantityInput = firstProductRow.querySelector('.quantity');
        const unitPriceInput = firstProductRow.querySelector('.productUnitPrice');
        
        if (productIDInput && quantityInput && unitPriceInput) {
          const productID = parseInt(productIDInput.value);
          const quantity = parseInt(quantityInput.value);
          const unitPrice = parseFloat(unitPriceInput.value);
          
          if (!isNaN(productID) && !isNaN(quantity) && !isNaN(unitPrice) && 
              productID > 0 && quantity > 0 && unitPrice > 0) {
            const termekSorAdat = {
              staff_ID: sellerID,
              customer_ID: customerID,
              product_ID: productID,
              quantity_sale: quantity,
              unit_price: unitPrice
            };
            
            saleData.push(termekSorAdat);
            console.log('‚úÖ Els≈ë term√©ksor sikeresen feldolgozva:', termekSorAdat);
          } else {
            console.warn('‚ùå Els≈ë term√©ksor √©rv√©nytelen adatokkal:', { productID, quantity, unitPrice });
          }
        }
      }
      
      // 2. A tov√°bbi term√©ksorok feldolgoz√°sa
      console.log("TOV√ÅBBI TERM√âKSOROK FELDOLGOZ√ÅSA:");
      
      additionalProductRows.forEach((row, index) => {
        console.log(`--- ${index + 2}. TERM√âKSOR FELDOLGOZ√ÅSA ---`);
        
        const productIDInput = row.querySelector('.product_ID');
        const quantityInput = row.querySelector('.quantity');
        const unitPriceInput = row.querySelector('.productUnitPrice');
        
        // Ha b√°rmelyik mez≈ë nem l√©tezik vagy √©rv√©nytelen, ugorjuk √°t
        if (!productIDInput || !quantityInput || !unitPriceInput) {
          console.warn(`‚ö†Ô∏è ${index + 2}. term√©ksor kihagyva (hi√°nyz√≥ mez≈ëk).`);
          return;
        }
        
        const productID = parseInt(productIDInput.value);
        const quantity = parseInt(quantityInput.value);
        const unitPrice = parseFloat(unitPriceInput.value);
        
        if (!isNaN(productID) && !isNaN(quantity) && !isNaN(unitPrice) && 
            productID > 0 && quantity > 0 && unitPrice > 0) {
          const termekSorAdat = {
            staff_ID: sellerID,
            customer_ID: customerID,
            product_ID: productID,
            quantity_sale: quantity,
            unit_price: unitPrice
          };
          
          saleData.push(termekSorAdat);
          console.log(`‚úÖ ${index + 2}. term√©ksor sikeresen feldolgozva:`, termekSorAdat);
        } else {
          console.warn(`‚ùå ${index + 2}. term√©ksor √©rv√©nytelen adatokkal:`, { productID, quantity, unitPrice });
        }
      });
      
      console.log("----- √ñSSZES√çT√âS -----");
      console.log("Feldolgozott term√©ksorok sz√°ma:", saleData.length);
      
      if (saleData.length === 0) {
        alert('Nem siker√ºlt √©rv√©nyes term√©ksorokat tal√°lni! K√©rj√ºk, ellen≈ërizd az adatokat.');
        return;
      }

      try {
        const response = await submitSaleData(saleData);
        
        // Sikeres v√°lasz kezel√©se
        if (response) {
          // ≈∞rlap alaphelyzetbe √°ll√≠t√°sa
          form.reset();
          
          // Dropdownok alaphelyzetbe
          if (selectedCustomer) selectedCustomer.textContent = "V√°lassz √ºgyfelet";
          if (document.getElementById('customer_ID')) document.getElementById('customer_ID').value = "";
          
          // Az els≈ë term√©ksor alaphelyzetbe √°ll√≠t√°sa
          const firstProductDropdown = document.querySelector('.selectedProduct');
          if (firstProductDropdown) {
            firstProductDropdown.textContent = "V√°lassz term√©ket";
          }
          
          // Az √∂sszes hozz√°adott term√©ksor elt√°vol√≠t√°sa
          const productRowsContainer = document.getElementById('productRows');
          if (productRowsContainer) {
            productRowsContainer.innerHTML = '';
          }
          
          // Modal bez√°r√°sa
          if (typeof modal !== 'undefined' && modal) modal.classList.add('hidden');
          if (typeof overlay !== 'undefined' && overlay) overlay.classList.add('hidden');
          
          // Sikeres √ºzenet
          alert('Sikeres elad√°s!');
          location.reload();
        } else {
          throw new Error("Hib√°s v√°lasz a szervert≈ël");
        }
      } catch (error) {
        console.error('Hiba t√∂rt√©nt:', error);
        alert(`Hiba t√∂rt√©nt: ${error.message}`);
      }
    } else {
      // Hiba eset√©n g√∂rgess√ºnk az els≈ë hiba√ºzenethez
      const firstError = document.querySelector('.error-message');
      if (firstError) {
        firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    }
  });
}

// A MEGADOTT SUBMIT FUNKCI√ì
async function submitSaleData(userData) {
  try {
    // R√âSZLETES NAPL√ìZ√ÅS
    console.log("----------- ADATK√úLD√âS KEZD≈êDIK -----------");
    console.log("K√ºld√©s el≈ëtt - Term√©kek sz√°ma:", userData.length);
    console.log("K√ºld√©s el≈ëtt - Elk√ºldend≈ë adatok STRINGIFY el≈ëtt:", userData);
    const jsonData = JSON.stringify(userData);
    console.log("K√ºld√©s el≈ëtt - Elk√ºldend≈ë JSON adat:", jsonData);
    console.log("K√ºld√©s el≈ëtt - Elk√ºldend≈ë JSON adat hossza:", jsonData.length, "karakter");
    
    // K√ºl√∂n ki√≠ratjuk minden term√©k adatait
    userData.forEach((item, index) => {
      console.log(`Term√©k #${index + 1} adatai:`, {
        staff_ID: item.staff_ID,
        customer_ID: item.customer_ID,
        product_ID: item.product_ID,
        quantity_sale: item.quantity_sale,
        unit_price: item.unit_price
      });
    });
    
    console.log("H√≠v√°s URL:", `${API_URL}sale`);
    console.log("H√≠v√°s met√≥dus:", "POST");
    
    const response = await fetch(`${API_URL}sale`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: jsonData
    });
    
    console.log("Backend v√°lasz st√°tusz:", response.status);
    console.log("Backend v√°lasz OK?", response.ok);
    console.log("Backend v√°lasz st√°tusz sz√∂veg:", response.statusText);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error("Backend hiba√ºzenet (nyers):", errorText);
      let errorData;
      try {
        errorData = JSON.parse(errorText);
        console.error("Backend hiba√ºzenet (JSON):", errorData);
      } catch (e) {
        console.error("Nem siker√ºlt JSON-k√©nt √©rtelmezni a hiba√ºzenetet");
      }
      throw new Error(`Hiba a szerveren: ${errorData?.message || response.statusText || response.status}`);
    }

    const responseText = await response.text();
    console.log("Backend v√°lasz (nyers):", responseText);
    
    let data;
    try {
      data = JSON.parse(responseText);
      console.log("Backend v√°lasz (JSON-k√©nt √©rtelmezve):", data);
    } catch (e) {
      console.warn("Nem siker√ºlt JSON-k√©nt √©rtelmezni a v√°laszt:", e);
      // Ha nem JSON a v√°lasz, akkor a nyers sz√∂veget adjuk vissza
      data = responseText;
    }
    
    console.log("----------- ADATK√úLD√âS BEFEJEZVE -----------");
    return data;

  } catch (error) {
    console.error('‚ùå Hiba t√∂rt√©nt az elad√°s r√∂gz√≠t√©sekor:', error);
    console.error('Hiba r√©szletei:', error.stack);
    throw error;
  }
}

// T√°bl√°zat szerkeszt√©s, ha haszn√°lva van
document.addEventListener("DOMContentLoaded", function () {
  document.querySelectorAll(".edit-btn").forEach((button) => {
    button.addEventListener("click", function (event) {
      event.preventDefault();
      
      // Az aktu√°lis sor kiv√°laszt√°sa
      let row = this.closest("tr");

      // Az √∂sszes szerkeszthet≈ë cella kiv√°laszt√°sa
      row.querySelectorAll("[data-editable='true']").forEach((cell) => {
        let text = cell.innerText.trim();
        let input = document.createElement("input");
        input.type = "text";
        input.value = text;
        input.className = "border px-2 py-1 w-full";

        // Ha elhagyja a mez≈ët, vissza√°ll√≠tja az √∫j √©rt√©ket
        input.addEventListener("blur", function () {
          cell.innerText = this.value;
        });

        cell.innerHTML = "";
        cell.appendChild(input);
        input.focus();
      });
    });
  });
});

// Glob√°lis v√°ltoz√≥k a leg√∂rd√ºl≈ë men√ºkh√∂z
window.productData = [];
window.productDataLoaded = false;

// Customer leg√∂rd√ºl≈ë men√º inicializ√°l√°sa
document.addEventListener("DOMContentLoaded", function () {
  const dropdownBtn = document.getElementById("customerDropdownBtn");
  const dropdownOptions = document.getElementById("customerOptions");
  const selectedCustomer = document.getElementById("selectedCustomer");
  const customerInput = document.getElementById("customer_ID");

  if (!dropdownBtn || !dropdownOptions) return;

  // Toggle
  dropdownBtn.addEventListener("click", function (e) {
    e.preventDefault();
    dropdownOptions.classList.toggle("hidden");
  });

  document.addEventListener("click", function (e) {
    if (
      !dropdownBtn.contains(e.target) &&
      !dropdownOptions.contains(e.target)
    ) {
      dropdownOptions.classList.add("hidden");
    }
  });

  // Partner bet√∂lt√©s
  Promise.all([
    fetch(`${API_URL}sale`),
    fetch(`${API_URL}partner`),
    fetch(`${API_URL}product`)
  ])
    .then(([saleRes, partnerRes, productRes]) => 
      Promise.all([saleRes.json(), partnerRes.json(), productRes.json()])
    )
    .then(([saleData, partnerData, productData]) => {
      // Term√©kek glob√°lis t√°rol√°sa
      window.productData = productData;
      window.productDataLoaded = true;
      
      // T√°bl√°zat renderel√©s, ha kell
      if (typeof renderTable === "function") {
        window.employeesData = saleData;
        renderTable();
      }

      // Vev≈ë dropdown felt√∂lt√©se
      dropdownOptions.innerHTML = "";

      partnerData
        .filter(partner => partner.status === 0) // csak a st√°tusz 0-√°sokat engedi √°t
        .sort((a, b) => {
          const nameA = (a.name || `${a.last_name} ${a.first_name}`).toLowerCase();
          const nameB = (b.name || `${b.last_name} ${b.first_name}`).toLowerCase();
          return nameA.localeCompare(nameB);
        })
        .forEach((partner) => {
          const displayName =
            partner.name || `${partner.last_name} ${partner.first_name}`;
          const li = document.createElement("li");
          li.textContent = displayName;
          li.setAttribute("data-value", partner.customer_ID);
          li.className = "px-4 py-2 cursor-pointer hover:bg-blue-100";
          li.addEventListener("click", function () {
            selectedCustomer.textContent = displayName;
            customerInput.value = partner.customer_ID;
            dropdownOptions.classList.add("hidden");
          });
          dropdownOptions.appendChild(li);
        });
        
      // Term√©k dropdown-ok inicializ√°l√°sa
      initAllProductDropdowns();
    })
    .catch((error) => {
      console.error("Hiba az adatok bet√∂lt√©sekor:", error);
    });
});

// Term√©k leg√∂rd√ºl≈ëk inicializ√°l√°sa
function initAllProductDropdowns() {
  const dropdownButtons = document.querySelectorAll(".productDropdownBtn");
  dropdownButtons.forEach(button => initProductDropdown(button));
}

// Egy term√©k leg√∂rd√ºl≈ë men√º inicializ√°l√°sa
function initProductDropdown(button) {
  if (!button) return;
  
  const parentElement = button.closest(".productRow") || button.closest(".flex-1");
  if (!parentElement) return;
  
  const options = parentElement.querySelector(".productOptions");
  const selectedProduct = button.querySelector(".selectedProduct");
  const productInput = parentElement.querySelector(".product_ID");
  
  if (!options || !selectedProduct || !productInput) {
    console.error("Hi√°nyz√≥ DOM elemek a term√©k dropdown-hoz", { button, options, selectedProduct, productInput });
    return;
  }

  // Kattint√°s esem√©ny a leg√∂rd√ºl≈ë gombra
  button.addEventListener("click", function(e) {
    e.preventDefault();
    e.stopPropagation();
    options.classList.toggle("hidden");
  });
  
  // Kattint√°s m√°shova - bez√°rja a leg√∂rd√ºl≈ët
  document.addEventListener("click", function(e) {
    if (!button.contains(e.target) && !options.contains(e.target)) {
      options.classList.add("hidden");
    }
  });
  
  // Felt√∂ltj√ºk a dropdown-t term√©kekkel
  fillProductDropdown(options, selectedProduct, productInput, parentElement);
}

// Term√©k dropdown felt√∂lt√©se
function fillProductDropdown(options, selectedProduct, productInput, parentElement) {
  // Ellen≈ërizz√ºk, hogy be vannak-e t√∂ltve a term√©kek
  if (!window.productData || !Array.isArray(window.productData) || window.productData.length === 0) {
    console.warn("M√©g nincsenek bet√∂ltve a term√©kadatok");
    return;
  }
  
  options.innerHTML = "";
  
  window.productData
    .sort((a, b) => a.product_name.localeCompare(b.product_name))
    .forEach((product) => {
      const li = document.createElement("li");
      li.textContent = product.product_name;
      li.setAttribute("data-value", product.product_ID);
      li.setAttribute("data-price", product.product_profit_price || 0);
      li.setAttribute("data-buy-price", product.product_price || 0);
      li.className = "px-4 py-2 cursor-pointer hover:bg-blue-100";
      
      li.addEventListener("click", function() {
        selectedProduct.textContent = product.product_name;
        productInput.value = product.product_ID;
        options.classList.add("hidden");
        
        // Az egys√©g√°r be√°ll√≠t√°sa
        const priceInput = parentElement.querySelector('.productUnitPrice') || 
                          parentElement.parentElement.querySelector('.productUnitPrice');
                          
        if (priceInput) {
          const price = product.product_profit_price || 0;
          priceInput.value = price;
        }
      });
      
      options.appendChild(li);
    });
}

// √öj term√©ksor hozz√°ad√°sa gomb esem√©nykezel≈ëje
document.addEventListener("DOMContentLoaded", function() {
  const addProductButton = document.getElementById("addProductRow");
  const productGrid = document.getElementById("productRows");
  
  if (addProductButton && productGrid) {
    addProductButton.addEventListener("click", function() {
      addNewProductRow(productGrid);
    });
  }
});

// √öj term√©ksor hozz√°ad√°sa
function addNewProductRow(container) {
  const newRow = document.createElement("div");
  newRow.className = "flex flex-col sm:flex-row gap-4 w-full productRowWrapper mt-4";

  newRow.innerHTML = `
    <div class="flex-1 relative productRow">
      <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-gray-900">Term√©k neve</label>
      <button type="button" class="productDropdownBtn w-full bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg px-4 py-2.5 text-left focus:outline-none focus:ring-2 focus:ring-blue-500 relative">
        <span class="selectedProduct">V√°lassz term√©ket</span>
        <svg class="w-5 h-5 absolute right-3 top-1/2 -translate-y-1/2 pointer-events-none text-gray-400" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
          <path d="M19 9l-7 7-7-7" />
        </svg>
      </button>
      <ul class="productOptions absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-md text-sm hidden max-h-60 overflow-auto">
      </ul>
      <input type="hidden" name="product_ID" class="product_ID" required>
      <span class="text-red-500 text-sm hidden">Mez≈ë kit√∂lt√©se k√∂telez≈ë</span>
      <button type="button" class="removeProductRow text-sm text-red-500 hover:underline mt-2">
        - Term√©k elt√°vol√≠t√°sa
      </button>
    </div>

    <div class="flex-1">
      <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-gray-900">Mennyis√©g</label>
      <input type="number" name="quantity" class="quantity bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-red-500 focus:border-red-500 block w-full p-2.5" placeholder="Mennyis√©g" required>
      <span class="text-red-500 text-sm hidden">Mez≈ë kit√∂lt√©se k√∂telez≈ë</span>
    </div>

    <div class="flex-1">
      <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-gray-900">Egys√©g√°r</label>
      <input type="number" name="price" class="productUnitPrice bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5" placeholder="Egys√©g√°r">
      <span class="text-red-500 text-sm hidden">Mez≈ë kit√∂lt√©se k√∂telez≈ë</span>
    </div>
  `;

  container.appendChild(newRow);

  // Esem√©nykezel≈ëk inicializ√°l√°sa
  const newButton = newRow.querySelector(".productDropdownBtn");
  initProductDropdown(newButton);
  
  // Elt√°vol√≠t√≥ gomb esem√©nykezel≈ëj√©nek hozz√°ad√°sa
  const removeButton = newRow.querySelector(".removeProductRow");
  removeButton.addEventListener("click", function() {
    newRow.remove();
  });
}

// ========== BEV√âTELEZ√âS MODUL ==========

// ========== BEV√âTELEZ√âS MODUL ==========

// Konstansok defin√≠ci√≥ja - bev√©telez√©si modulhoz
const openBuyingModal = document.getElementById('openBuyingModal');
const closeBuyingModal = document.getElementById('closeBuyingModal');
const buyingModal = document.getElementById('buying-crud-modal');
const buyingForm = document.getElementById('buyingForm');
const submitBuyingButton = document.getElementById('submitBuyingForm');
const buyingOverlay = document.getElementById('overlay'); // Ugyanazt az overlay-t haszn√°ljuk

// Modal logika - bev√©telez√©shez
if (openBuyingModal) {
  openBuyingModal.addEventListener('click', () => {
    buyingModal.classList.remove('hidden');
    buyingModal.classList.add('flex');
    buyingOverlay.classList.remove('hidden');
  });
}

if (closeBuyingModal) {
  closeBuyingModal.addEventListener('click', () => {
    buyingModal.classList.add('hidden');
    buyingModal.classList.remove('flex');
    buyingOverlay.classList.add('hidden');
    resetBuyingForm();
  });
}

// Bez√°r√°s, ha h√°tt√©rre kattint
if (buyingModal) {
  buyingModal.addEventListener('click', (e) => {
    if (e.target === buyingModal) {
      buyingModal.classList.add('hidden');
      buyingModal.classList.remove('flex');
      buyingOverlay.classList.add('hidden');
      resetBuyingForm();
    }
  });
}

// Form alaphelyzetbe √°ll√≠t√°sa - bev√©telez√©shez
function resetBuyingForm() {
  if (!buyingForm) return;
  
  buyingForm.reset();
  clearErrors(buyingForm);
  
  // Besz√°ll√≠t√≥ mez≈ë alaphelyzetbe
  const supplierSelect = document.getElementById('selectedSupplier');
  if (supplierSelect) {
    supplierSelect.textContent = "V√°lassz besz√°ll√≠t√≥t";
  }
  
  // Term√©k mez≈ë alaphelyzetbe
  const productSelect = document.getElementById('selectedBuyingProduct');
  if (productSelect) {
    productSelect.textContent = "V√°lassz term√©ket";
  }
  
  // Term√©k r√©szletek elrejt√©se
  const detailsContainer = document.getElementById('product-details');
  if (detailsContainer) {
    detailsContainer.classList.add('hidden');
  }
  
  // Bev√©telez√©si sorok elt√°vol√≠t√°sa
  const buyingRowsContainer = document.getElementById('buyingRows');
  if (buyingRowsContainer) {
    buyingRowsContainer.innerHTML = '';
  }
}

// Form valid√°ci√≥ - bev√©telez√©shez
function validateBuyingForm() {
  let isValid = true;
  
  // Besz√°ll√≠t√≥ valid√°ci√≥
  const selectedSupplier = document.getElementById('selectedSupplier');
  const supplierInput = document.getElementById('supplier_ID');
  
  if (selectedSupplier.textContent === 'V√°lassz besz√°ll√≠t√≥t' || !supplierInput.value) {
    showError(supplierInput, 'K√∂telez≈ë kiv√°lasztani egy besz√°ll√≠t√≥t!');
    isValid = false;
  } else {
    clearError(supplierInput);
  }
  
  // Az els≈ë term√©ksor ellen≈ërz√©se
  const firstProductRow = document.querySelector('.buyingProductRow:not([id])');
  if (firstProductRow) {
    const selectedProduct = firstProductRow.querySelector('.selectedBuyingProduct');
    const productInput = firstProductRow.querySelector('.product_ID');

    if (selectedProduct.textContent === 'V√°lassz term√©ket' || !productInput.value) {
      showError(productInput, 'K√∂telez≈ë kiv√°lasztani egy term√©ket!');
      isValid = false;
    } else {
      clearError(productInput);
    }
    
    // Mennyis√©g valid√°l√°sa az els≈ë term√©ksorn√°l
    const quantityInput = firstProductRow.querySelector('.buyingQuantity');
    if (!quantityInput.value || isNaN(quantityInput.value) || parseInt(quantityInput.value) <= 0) {
      showError(quantityInput, 'K√∂telez≈ë megadni √©rv√©nyes mennyis√©get!');
      isValid = false;
    } else {
      clearError(quantityInput);
    }

    // Beszerz√©si √°r valid√°l√°sa az els≈ë term√©ksorn√°l
    const buyPriceInput = firstProductRow.querySelector('.buyingUnitPrice');
    if (buyPriceInput && (!buyPriceInput.value || isNaN(buyPriceInput.value) || parseFloat(buyPriceInput.value) <= 0)) {
      showError(buyPriceInput, 'K√∂telez≈ë megadni √©rv√©nyes beszerz√©si √°rat!');
      isValid = false;
    } else if (buyPriceInput) {
      clearError(buyPriceInput);
    }
  }
  
  // A tov√°bbi term√©ksorok ellen≈ërz√©se
  const additionalBuyingRows = document.querySelectorAll('.buyingRowWrapper');
  additionalBuyingRows.forEach((rowWrapper, index) => {
    // ProductID valid√°l√°sa
    const productIDInput = rowWrapper.querySelector('.product_ID');
    if (productIDInput) {
      const productID = parseInt(productIDInput.value);
      if (isNaN(productID) || productID <= 0) {
        showError(productIDInput, `K√∂telez≈ë kiv√°lasztani term√©ket a ${index + 2}. sorban!`);
        isValid = false;
      } else {
        clearError(productIDInput);
      }
    }

    // Mennyis√©g valid√°l√°sa
    const quantityInput = rowWrapper.querySelector('.buyingQuantity');
    if (quantityInput) {
      const quantity = parseFloat(quantityInput.value);
      if (isNaN(quantity) || quantity <= 0) {
        showError(quantityInput, `K√∂telez≈ë megadni √©rv√©nyes mennyis√©get a ${index + 2}. sorban!`);
        isValid = false;
      } else {
        clearError(quantityInput);
      }
    }

    // Beszerz√©si √°r valid√°l√°sa
    const buyPriceInput = rowWrapper.querySelector('.buyingUnitPrice');
    if (buyPriceInput) {
      const buyPrice = parseFloat(buyPriceInput.value);
      if (isNaN(buyPrice) || buyPrice <= 0) {
        showError(buyPriceInput, `K√∂telez≈ë megadni √©rv√©nyes beszerz√©si √°rat a ${index + 2}. sorban!`);
        isValid = false;
      } else {
        clearError(buyPriceInput);
      }
    }
  });
  
  return isValid;
}

// Term√©k r√©szletei friss√≠t√©se
function updateProductDetails(productId) {
  if (!productId || productId === '0') {
    const detailsContainer = document.getElementById('product-details');
    if (detailsContainer) {
      detailsContainer.classList.add('hidden');
    }
    return;
  }
  
  // Keress√ºk meg a term√©ket a window.productData-b√≥l
  if (window.productData && Array.isArray(window.productData)) {
    const product = window.productData.find(p => p.product_ID == productId);
    
    if (product) {
      const detailsContainer = document.getElementById('product-details');
      if (detailsContainer) {
        detailsContainer.innerHTML = `
          <div class="bg-gray-50 p-3 rounded-md mt-3">
            <h4 class="font-medium text-gray-700">Term√©k adatok:</h4>
            <p><span class="text-gray-600">Aktu√°lis k√©szlet:</span> ${product.product_stock || 0} ${product.product_unit || 'db'}</p>
            <p><span class="text-gray-600">Utols√≥ beszerz√©si √°r:</span> ${product.product_price || 0} Ft</p>
            <p><span class="text-gray-600">Aj√°nlott elad√°si √°r:</span> ${product.product_profit_price || 0} Ft</p>
          </div>
        `;
        detailsContainer.classList.remove('hidden');
        
        // Beszerz√©si √°r mez≈ëbe is be√°ll√≠tjuk az utols√≥ √°rat
        const parentElement = document.querySelector(`[data-value="${productId}"]`).closest('.buyingProductRow') || 
                             document.querySelector(`[data-value="${productId}"]`).closest('.buyingRowWrapper');
        
        if (parentElement) {
          const buyPriceInput = parentElement.querySelector('.buyingUnitPrice');
          if (buyPriceInput && product.product_price) {
            buyPriceInput.value = product.product_price;
          }
        }
      }
    }
  }
}

// √ñsszes besz√°ll√≠t√≥ dropdown inicializ√°l√°sa 
document.addEventListener("DOMContentLoaded", function() {
  // Besz√°ll√≠t√≥ leg√∂rd√ºl≈ë men√º inicializ√°l√°sa
  const supplierDropdownBtn = document.getElementById("supplierDropdownBtn");
  const supplierOptions = document.getElementById("supplierOptions");
  const selectedSupplier = document.getElementById("selectedSupplier");
  const supplierInput = document.getElementById("supplier_ID");
  
  if (supplierDropdownBtn && supplierOptions) {
    // Toggle
    supplierDropdownBtn.addEventListener("click", function(e) {
      e.preventDefault();
      supplierOptions.classList.toggle("hidden");
    });
    
    document.addEventListener("click", function(e) {
      if (!supplierDropdownBtn.contains(e.target) && !supplierOptions.contains(e.target)) {
        supplierOptions.classList.add("hidden");
      }
    });
    
    // Besz√°ll√≠t√≥k bet√∂lt√©se
    fetch(`${API_URL}partner`)
      .then(response => response.json())
      .then(supplierData => {
        supplierOptions.innerHTML = "";
        
        supplierData
          .filter(supplier => supplier.status === 0) // csak az akt√≠v st√°tusz√∫akat engedj√ºk √°t
          .sort((a, b) => a.name.toLowerCase().localeCompare(b.name.toLowerCase()))
          .forEach(supplier => {
            const li = document.createElement("li");
            li.textContent = supplier.name;
            li.setAttribute("data-value", supplier.supplier_ID);
            li.className = "px-4 py-2 cursor-pointer hover:bg-blue-100";
            li.addEventListener("click", function() {
              selectedSupplier.textContent = supplier.name;
              supplierInput.value = supplier.supplier_ID;
              supplierOptions.classList.add("hidden");
            });
            supplierOptions.appendChild(li);
          });
      })
      .catch(error => {
        console.error("Hiba a besz√°ll√≠t√≥k bet√∂lt√©sekor:", error);
      });
  }
  
  // Term√©k leg√∂rd√ºl≈ëk inicializ√°l√°sa a m√°r megl√©v≈ë term√©kekn√©l
  initAllBuyingProductDropdowns();
  
  // √öj term√©ksor hozz√°ad√°sa gomb esem√©nykezel≈ëje
  const addBuyingProductButton = document.getElementById("addBuyingProductRow");
  const buyingProductGrid = document.getElementById("buyingRows");
  
  if (addBuyingProductButton && buyingProductGrid) {
    addBuyingProductButton.addEventListener("click", function() {
      addNewBuyingProductRow(buyingProductGrid);
    });
  }
  
  // Form esem√©nykezel≈ë
  if (submitBuyingButton && buyingForm) {
    submitBuyingButton.addEventListener("click", async function(event) {
      event.preventDefault();
      
      // √ñsszes hiba√ºzenet t√∂rl√©se
      clearErrors(buyingForm);
      
      if (validateBuyingForm()) {
        // Az elad√≥ ID lek√©r√©se
        const staffID = await getLoggedInStaffID();
        const supplierID = parseInt(document.querySelector('input[name="supplier_ID"]').value);
        
        // Ellen≈ërz√©s: van-e elad√≥ √©s besz√°ll√≠t√≥ azonos√≠t√≥
        if (isNaN(staffID)) {
          alert('Hiba t√∂rt√©nt az elad√≥ azonos√≠t√°sakor!');
          return;
        }
        
        if (isNaN(supplierID)) {
          alert('√ârv√©nytelen besz√°ll√≠t√≥ azonos√≠t√≥!');
          return;
        }
        
        console.log("--------- BEV√âTELEZ√âSI SOROK FELDOLGOZ√ÅSA KEZD≈êDIK ---------");
        console.log("Bejelentkezett elad√≥ ID:", staffID);
        console.log("Kiv√°lasztott besz√°ll√≠t√≥ ID:", supplierID);
        
        const buyingData = [];
        
        // 1. Az els≈ë (eredeti) term√©ksor feldolgoz√°sa
        const firstProductRow = document.querySelector('.buyingProductRow:not([id])');
        if (firstProductRow) {
          console.log("ELS≈ê BEV√âTELEZ√âSI SOR FELDOLGOZ√ÅSA:");
          
          const productIDInput = firstProductRow.querySelector('.product_ID');
          const quantityInput = firstProductRow.querySelector('.buyingQuantity');
          const buyPriceInput = firstProductRow.querySelector('.buyingUnitPrice');
          
          if (productIDInput && quantityInput && buyPriceInput) {
            const productID = parseInt(productIDInput.value);
            const quantity = parseInt(quantityInput.value);
            const buyPrice = parseFloat(buyPriceInput.value);
            
            if (!isNaN(productID) && !isNaN(quantity) && !isNaN(buyPrice) && 
                productID > 0 && quantity > 0 && buyPrice > 0) {
              const termekSorAdat = {
                staff_ID: staffID,
                supplier_ID: supplierID,
                product_ID: productID,
                quantity_buy: quantity,
                buy_price: buyPrice
              };
              
              buyingData.push(termekSorAdat);
              console.log('‚úÖ Els≈ë bev√©telez√©si sor sikeresen feldolgozva:', termekSorAdat);
            } else {
              console.warn('‚ùå Els≈ë bev√©telez√©si sor √©rv√©nytelen adatokkal:', { productID, quantity, buyPrice });
            }
          }
        }
        
        // 2. A tov√°bbi term√©ksorok feldolgoz√°sa
        console.log("TOV√ÅBBI BEV√âTELEZ√âSI SOROK FELDOLGOZ√ÅSA:");
        
        const additionalBuyingRows = document.querySelectorAll('.buyingRowWrapper');
        additionalBuyingRows.forEach((row, index) => {
          console.log(`--- ${index + 2}. BEV√âTELEZ√âSI SOR FELDOLGOZ√ÅSA ---`);
          
          const productIDInput = row.querySelector('.product_ID');
          const quantityInput = row.querySelector('.buyingQuantity');
          const buyPriceInput = row.querySelector('.buyingUnitPrice');
          
          // Ha b√°rmelyik mez≈ë nem l√©tezik vagy √©rv√©nytelen, ugorjuk √°t
          if (!productIDInput || !quantityInput || !buyPriceInput) {
            console.warn(`‚ö†Ô∏è ${index + 2}. bev√©telez√©si sor kihagyva (hi√°nyz√≥ mez≈ëk).`);
            return;
          }
          
          const productID = parseInt(productIDInput.value);
          const quantity = parseInt(quantityInput.value);
          const buyPrice = parseFloat(buyPriceInput.value);
          
          if (!isNaN(productID) && !isNaN(quantity) && !isNaN(buyPrice) && 
              productID > 0 && quantity > 0 && buyPrice > 0) {
            const termekSorAdat = {
              staff_ID: staffID,
              supplier_ID: supplierID,
              product_ID: productID,
              quantity_buy: quantity,
              buy_price: buyPrice
            };
            
            buyingData.push(termekSorAdat);
            console.log(`‚úÖ ${index + 2}. bev√©telez√©si sor sikeresen feldolgozva:`, termekSorAdat);
          } else {
            console.warn(`‚ùå ${index + 2}. bev√©telez√©si sor √©rv√©nytelen adatokkal:`, { productID, quantity, buyPrice });
          }
        });
        
        console.log("----- √ñSSZES√çT√âS -----");
        console.log("Feldolgozott bev√©telez√©si sorok sz√°ma:", buyingData.length);
        
        if (buyingData.length === 0) {
          alert('Nem siker√ºlt √©rv√©nyes term√©ksorokat tal√°lni! K√©rj√ºk, ellen≈ërizd az adatokat.');
          return;
        }
        
        try {
          const response = await submitBuyingData(buyingData);
          
          // Sikeres v√°lasz kezel√©se
          if (response) {
            // ≈∞rlap alaphelyzetbe √°ll√≠t√°sa
            resetBuyingForm();
            
            // Modal bez√°r√°sa
            buyingModal.classList.add('hidden');
            buyingModal.classList.remove('flex');
            buyingOverlay.classList.add('hidden');
            
            // Sikeres √ºzenet
            alert('Sikeres bev√©telez√©s!');
            location.reload();
          } else {
            throw new Error("Hib√°s v√°lasz a szervert≈ël");
          }
        } catch (error) {
          console.error('Hiba t√∂rt√©nt:', error);
          alert(`Hiba t√∂rt√©nt: ${error.message}`);
        }
      } else {
        // Hiba eset√©n g√∂rgess√ºnk az els≈ë hiba√ºzenethez
        const firstError = buyingForm.querySelector('.error-message');
        if (firstError) {
          firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
      }
    });
  }
});

// Term√©k leg√∂rd√ºl≈ëk inicializ√°l√°sa
function initAllBuyingProductDropdowns() {
  const dropdownButtons = document.querySelectorAll(".buyingProductDropdownBtn");
  dropdownButtons.forEach(button => initBuyingProductDropdown(button));
}

// Egy term√©k leg√∂rd√ºl≈ë men√º inicializ√°l√°sa
function initBuyingProductDropdown(button) {
  if (!button) return;
  
  const parentElement = button.closest(".buyingProductRow") || button.closest(".buyingRowWrapper");
  if (!parentElement) return;
  
  const options = parentElement.querySelector(".buyingProductOptions");
  const selectedProduct = button.querySelector(".selectedBuyingProduct");
  const productInput = parentElement.querySelector(".product_ID");
  
  if (!options || !selectedProduct || !productInput) {
    console.error("Hi√°nyz√≥ DOM elemek a bev√©telez√©si term√©k dropdown-hoz", { button, options, selectedProduct, productInput });
    return;
  }

  // Kattint√°s esem√©ny a leg√∂rd√ºl≈ë gombra
  button.addEventListener("click", function(e) {
    e.preventDefault();
    e.stopPropagation();
    options.classList.toggle("hidden");
  });
  
  // Kattint√°s m√°shova - bez√°rja a leg√∂rd√ºl≈ët
  document.addEventListener("click", function(e) {
    if (!button.contains(e.target) && !options.contains(e.target)) {
      options.classList.add("hidden");
    }
  });
  
  // Felt√∂ltj√ºk a dropdown-t term√©kekkel
  fillBuyingProductDropdown(options, selectedProduct, productInput, parentElement);
}

// Term√©k dropdown felt√∂lt√©se
function fillBuyingProductDropdown(options, selectedProduct, productInput, parentElement) {
  // Ellen≈ërizz√ºk, hogy be vannak-e t√∂ltve a term√©kek
  if (!window.productData || !Array.isArray(window.productData) || window.productData.length === 0) {
    console.warn("M√©g nincsenek bet√∂ltve a term√©kadatok");
    
    // Bet√∂ltj√ºk a term√©kadatokat, ha m√©g nincsenek bet√∂ltve
    fetch(`${API_URL}product`)
      .then(response => response.json())
      .then(productData => {
        window.productData = productData;
        window.productDataLoaded = true;
        fillBuyingProductDropdown(options, selectedProduct, productInput, parentElement);
      })
      .catch(error => {
        console.error("Hiba a term√©kek bet√∂lt√©sekor:", error);
      });
    return;
  }
  
  options.innerHTML = "";
  
  window.productData
    .sort((a, b) => a.product_name.localeCompare(b.product_name))
    .forEach((product) => {
      const li = document.createElement("li");
      li.textContent = product.product_name;
      li.setAttribute("data-value", product.product_ID);
      li.setAttribute("data-price", product.product_price || 0);
      li.className = "px-4 py-2 cursor-pointer hover:bg-blue-100";
      
      li.addEventListener("click", function() {
        selectedProduct.textContent = product.product_name;
        productInput.value = product.product_ID;
        options.classList.add("hidden");
        
        // Az egys√©g√°r be√°ll√≠t√°sa
        const priceInput = parentElement.querySelector('.buyingUnitPrice');
        if (priceInput) {
          const price = product.product_price || 0;
          priceInput.value = price;
        }
        
        // Term√©k r√©szletek friss√≠t√©se
        updateProductDetails(product.product_ID);
      });
      
      options.appendChild(li);
    });
}

// √öj bev√©telez√©si term√©ksor hozz√°ad√°sa

// √öj term√©ksor hozz√°ad√°sa gomb esem√©nykezel≈ëje
document.addEventListener("DOMContentLoaded", function() {
  const addProductButton = document.getElementById("addBuyProductRow");
  const productGrid = document.getElementById("BuyProductRows");
  
  if (addProductButton && productGrid) {
    addProductButton.addEventListener("click", function() {
      addNewProductRow(productGrid);
    });
  }
});


function addNewBuyingProductRow(container) {
  const newRow = document.createElement("div");
  newRow.className = "flex flex-col sm:flex-row gap-4 w-full buyingRowWrapper mt-4";

  newRow.innerHTML = `
    <div class="flex-1 relative buyingProductRow">
      <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-gray-900">Term√©k neve</label>
      <button type="button" class="buyingProductDropdownBtn w-full bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg px-4 py-2.5 text-left focus:outline-none focus:ring-2 focus:ring-blue-500 relative">
        <span class="selectedBuyingProduct">V√°lassz term√©ket</span>
        <svg class="w-5 h-5 absolute right-3 top-1/2 -translate-y-1/2 pointer-events-none text-gray-400" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
          <path d="M19 9l-7 7-7-7" />
        </svg>
      </button>
      <ul class="buyingProductOptions absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-md text-sm hidden max-h-60 overflow-auto">
      </ul>
      <input type="hidden" name="product_ID" class="product_ID" required>
      <span class="text-red-500 text-sm hidden">Mez≈ë kit√∂lt√©se k√∂telez≈ë</span>
      <button type="button" class="removeBuyingProductRow text-sm text-red-500 hover:underline mt-2">
        - Term√©k elt√°vol√≠t√°sa
      </button>
    </div>

    <div class="flex-1">
      <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-gray-900">Mennyis√©g</label>
      <input type="number" name="quantity_buy" class="buyingQuantity bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-red-500 focus:border-red-500 block w-full p-2.5" placeholder="Mennyis√©g" required>
      <span class="text-red-500 text-sm hidden">Mez≈ë kit√∂lt√©se k√∂telez≈ë</span>
    </div>

    <div class="flex-1">
      <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-gray-900">Beszerz√©si √°r</label>
      <input type="number" name="buy_price" class="buyingUnitPrice bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5" placeholder="Beszerz√©si √°r">
      <span class="text-red-500 text-sm hidden">Mez≈ë kit√∂lt√©se k√∂telez≈ë</span>
    </div>
  `;

  container.appendChild(newRow);

  // Esem√©nykezel≈ëk inicializ√°l√°sa
  const newButton = newRow.querySelector(".buyingProductDropdownBtn");
  initBuyingProductDropdown(newButton);
  
  // Elt√°vol√≠t√≥ gomb esem√©nykezel≈ëj√©nek hozz√°ad√°sa
  const removeButton = newRow.querySelector(".removeBuyingProductRow");
  removeButton.addEventListener("click", function() {
    newRow.remove();
  });
}

// Bev√©telez√©si adatok bek√ºld√©se
async function submitBuyingData(buyingData) {
  try {
    // R√âSZLETES NAPL√ìZ√ÅS
    console.log("----------- BEV√âTELEZ√âSI ADATK√úLD√âS KEZD≈êDIK -----------");
    console.log("K√ºld√©s el≈ëtt - Term√©kek sz√°ma:", buyingData.length);
    console.log("K√ºld√©s el≈ëtt - Elk√ºldend≈ë adatok STRINGIFY el≈ëtt:", buyingData);
    const jsonData = JSON.stringify(buyingData);
    console.log("K√ºld√©s el≈ëtt - Elk√ºldend≈ë JSON adat:", jsonData);
    console.log("K√ºld√©s el≈ëtt - Elk√ºldend≈ë JSON adat hossza:", jsonData.length, "karakter");
    
    // K√ºl√∂n ki√≠ratjuk minden term√©k adatait
    buyingData.forEach((item, index) => {
      console.log(`Term√©k #${index + 1} adatai:`, {
        staff_ID: item.staff_ID,
        supplier_ID: item.supplier_ID,
        product_ID: item.product_ID,
        quantity_buy: item.quantity_buy,
        buy_price: item.buy_price
      });
    });
    
    console.log("H√≠v√°s URL:", `${API_URL}buying`);
    console.log("H√≠v√°s met√≥dus:", "POST");
    
    const response = await fetch(`${API_URL}buying`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: jsonData
    });
    
    console.log("Backend v√°lasz st√°tusz:", response.status);
    console.log("Backend v√°lasz OK?", response.ok);
    console.log("Backend v√°lasz st√°tusz sz√∂veg:", response.statusText);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error("Backend hiba√ºzenet (nyers):", errorText);
      let errorData;
      try {
        errorData = JSON.parse(errorText);
        console.error("Backend hiba√ºzenet (JSON):", errorData);
      } catch (e) {
        console.error("Nem siker√ºlt JSON-k√©nt √©rtelmezni a hiba√ºzenetet");
      }
      throw new Error(`Hiba a szerveren: ${errorData?.message || response.statusText || response.status}`);
    }

    const responseText = await response.text();
    console.log("Backend v√°lasz (nyers):", responseText);
    
    let data;
    try {
      data = JSON.parse(responseText);
      console.log("Backend v√°lasz (JSON-k√©nt √©rtelmezve):", data);
    } catch (e) {
      console.warn("Nem siker√ºlt JSON-k√©nt √©rtelmezni a v√°laszt:", e);
      // Ha nem JSON a v√°lasz, akkor a nyers sz√∂veget adjuk vissza
      data = responseText;
    }
    
    console.log("----------- BEV√âTELEZ√âSI ADATK√úLD√âS BEFEJEZVE -----------");
    return data;

  } catch (error) {
    console.error('‚ùå Hiba t√∂rt√©nt a bev√©telez√©s r√∂gz√≠t√©sekor:', error);
    console.error('Hiba r√©szletei:', error.stack);
    throw error;
  }
}

document.querySelector("#selectedSupplier").addEventListener("click", function() {
  let productOptions = document.querySelector(".productOptions");
  productOptions.classList.toggle("hidden"); // Ez l√°that√≥v√° teszi/elt√ºnteti a dropdown-t
});



